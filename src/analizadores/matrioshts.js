/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var matrioshts = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,16],$V2=[1,17],$V3=[1,20],$V4=[1,29],$V5=[1,30],$V6=[1,21],$V7=[1,22],$V8=[1,23],$V9=[1,24],$Va=[1,25],$Vb=[1,27],$Vc=[1,26],$Vd=[1,28],$Ve=[5,19,22,23,25,43,44,45,47,50,53,54,55,58,59,60,67,69],$Vf=[1,43],$Vg=[1,46],$Vh=[1,47],$Vi=[1,48],$Vj=[1,45],$Vk=[1,44],$Vl=[1,60],$Vm=[1,66],$Vn=[1,58],$Vo=[1,59],$Vp=[1,61],$Vq=[1,62],$Vr=[1,63],$Vs=[1,64],$Vt=[1,65],$Vu=[8,35],$Vv=[2,30],$Vw=[1,71],$Vx=[1,72],$Vy=[8,21],$Vz=[1,92],$VA=[1,91],$VB=[1,93],$VC=[1,94],$VD=[1,95],$VE=[1,96],$VF=[1,97],$VG=[1,98],$VH=[1,99],$VI=[1,100],$VJ=[1,101],$VK=[1,102],$VL=[1,103],$VM=[1,104],$VN=[1,105],$VO=[8,21,35,37,42,70,71,72,73,74,75,76,77,78,79,80,81,82,83,85],$VP=[1,112],$VQ=[1,113],$VR=[1,114],$VS=[1,115],$VT=[1,121],$VU=[21,35,42],$VV=[1,133],$VW=[8,21,35,37,42,82,83,85],$VX=[8,21,35,39,46],$VY=[21,35],$VZ=[8,21,35,37,42,70,71,76,77,78,79,80,81,82,83,85],$V_=[8,21,35,37,42,70,71,72,73,74,76,77,78,79,80,81,82,83,85],$V$=[8,21,35,37,42,76,77,78,79,80,81,82,83,85],$V01=[1,184],$V11=[1,185],$V21=[47,53,54],$V31=[1,208];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"s":3,"lista":4,"EOF":5,"instruccion":6,"declaraciones":7,"RPUNTOCOMA":8,"asignacion":9,"instruccionif":10,"instruccionswitch":11,"instruccionfor":12,"instruccionwhile":13,"imprimir":14,"declararfuncion":15,"nativa":16,"llamarfuncion":17,"masmenos":18,"RGRAFICAR":19,"RPARA":20,"RPARC":21,"RBREAK":22,"RCONTINUE":23,"instruccionreturn":24,"IDENTIFICADOR":25,"RMASMAS":26,"RMENOSMENOS":27,"RPUNTO":28,"RPUSH":29,"listaexpresiones":30,"RPOP":31,"RLENGTH":32,"tipovariable":33,"listavariables":34,"RCOMA":35,"variable":36,"RDOSPUNTOS":37,"tipodato":38,"RIGUAL":39,"expresion":40,"RCORCHETEA":41,"RCORCHETEC":42,"RLET":43,"RCONST":44,"RIF":45,"RLLAVEA":46,"RLLAVEC":47,"instruccionelse":48,"RELSE":49,"RSWITCH":50,"casos":51,"caso":52,"RCASE":53,"RDEFAULT":54,"RFOR":55,"ROF":56,"RIN":57,"RWHILE":58,"RDO":59,"RFUNCTION":60,"parametros":61,"parametro":62,"RSTRING":63,"RNUMBER":64,"RBOOLEAN":65,"RVOID":66,"RCONSOLE":67,"RLOG":68,"RRETURN":69,"RMENOS":70,"RMAS":71,"RPOR":72,"RDIVISION":73,"RMODULO":74,"REXPONENTE":75,"RMAYORQUE":76,"RMENORQUE":77,"RMAYORIGUALQUE":78,"RMENORIGUALQUE":79,"RIGUALQUE":80,"RDIFERENTEQUE":81,"RAND":82,"ROR":83,"RNOT":84,"RINTERROGACION":85,"NUM":86,"RTRUE":87,"RFALSE":88,"CADENACOMILLADOBLE":89,"CADENACOMILLASIMPLE":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"RPUNTOCOMA",19:"RGRAFICAR",20:"RPARA",21:"RPARC",22:"RBREAK",23:"RCONTINUE",25:"IDENTIFICADOR",26:"RMASMAS",27:"RMENOSMENOS",28:"RPUNTO",29:"RPUSH",31:"RPOP",32:"RLENGTH",35:"RCOMA",37:"RDOSPUNTOS",39:"RIGUAL",41:"RCORCHETEA",42:"RCORCHETEC",43:"RLET",44:"RCONST",45:"RIF",46:"RLLAVEA",47:"RLLAVEC",49:"RELSE",50:"RSWITCH",53:"RCASE",54:"RDEFAULT",55:"RFOR",56:"ROF",57:"RIN",58:"RWHILE",59:"RDO",60:"RFUNCTION",63:"RSTRING",64:"RNUMBER",65:"RBOOLEAN",66:"RVOID",67:"RCONSOLE",68:"RLOG",69:"RRETURN",70:"RMENOS",71:"RMAS",72:"RPOR",73:"RDIVISION",74:"RMODULO",75:"REXPONENTE",76:"RMAYORQUE",77:"RMENORQUE",78:"RMAYORIGUALQUE",79:"RMENORIGUALQUE",80:"RIGUALQUE",81:"RDIFERENTEQUE",82:"RAND",83:"ROR",84:"RNOT",85:"RINTERROGACION",86:"NUM",87:"RTRUE",88:"RFALSE",89:"CADENACOMILLADOBLE",90:"CADENACOMILLASIMPLE"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,4],[6,2],[6,2],[6,1],[18,2],[18,2],[16,6],[16,5],[16,3],[7,2],[34,3],[34,1],[36,5],[36,3],[36,3],[36,1],[36,7],[36,6],[36,5],[36,4],[33,1],[33,1],[9,3],[10,7],[10,8],[48,2],[48,4],[11,7],[51,2],[51,1],[52,4],[52,3],[12,11],[12,11],[12,10],[12,10],[13,7],[13,8],[15,7],[15,10],[15,8],[15,9],[17,3],[17,4],[61,3],[61,1],[62,3],[38,1],[38,1],[38,1],[38,1],[38,3],[38,3],[38,3],[14,7],[24,2],[24,3],[30,3],[30,1],[40,2],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,2],[40,3],[40,5],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 $$[$0-1].hijos.push($$[$0]); this.$=$$[$0-1];  /*$$[$0-1].push($$[$0]); this.$=$$[$0-1];*/
break;
case 3:
this.$=nodobase.nuevonodo('INSTRUCCIONES',[$$[$0]],yylineno);  /*this.$=[$$[$0]]*/
break;
case 4: case 5:
this.$=nodobase.nuevonodo('IDECLARACIONES',[$$[$0-1],$$[$0]],yylineno);
break;
case 6: case 7: case 11: case 18:
this.$=$$[$0]
break;
case 8: case 9: case 10: case 98: case 99:
this.$=$$[$0];
break;
case 12:
this.$=nodobase.nuevonodo('NATIVA',[$$[$0-1],$$[$0]],yylineno);
break;
case 13:
this.$=nodobase.nuevonodo('LFUNCION',[$$[$0-1],$$[$0]],yylineno);
break;
case 14:
this.$=nodobase.nuevonodo('IMAS_MAS',[$$[$0-1],$$[$0]],yylineno);
break;
case 15:
this.$=nodobase.nuevonodo('GRAFICAR',[$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 16:
this.$=nodobase.nuevonodo('BREAK',[$$[$0-1],$$[$0]],yylineno);
break;
case 17:
this.$=nodobase.nuevonodo('CONTINUE',[$$[$0-1],$$[$0]],yylineno);
break;
case 19:
this.$=nodobase.nuevonodo('MAS_MAS',[$$[$0-1],$$[$0]],yylineno);
break;
case 20:
this.$=nodobase.nuevonodo('MENOS_MENOS',[$$[$0-1],$$[$0]],yylineno);
break;
case 21:
this.$=nodobase.nuevonodo('PUSH',[$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 22:
this.$=nodobase.nuevonodo('POP',[$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 23:
this.$=nodobase.nuevonodo('LENGTH',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 24:
this.$=nodobase.nuevonodo('DECLARACION_VARIABLE',[$$[$0-1],$$[$0]],yylineno);
break;
case 25: case 59: case 72:
$$[$0-2].hijos.push($$[$0]); this.$=$$[$0-2];
break;
case 26:
this.$=nodobase.nuevonodo('LISTA_VARIABLES',[$$[$0]],yylineno);
break;
case 27:
this.$= nodobase.nuevonodo('VARIABLE_FULL',[$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 28:
this.$= nodobase.nuevonodo('VARIABLE_CON_EXPRESION',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 29:
this.$= nodobase.nuevonodo('VARIABLE_SIN_EXPRESION',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 30:
this.$= nodobase.nuevonodo('VARIABLE_ID',[$$[$0]],yylineno);
break;
case 31:
this.$= nodobase.nuevonodo('ARREGLO_COMPLETO1',[$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 32:
this.$= nodobase.nuevonodo('ARREGLO_COMPLETO2',[$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 33:
this.$= nodobase.nuevonodo('ARREGLO',[$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 34:
this.$= nodobase.nuevonodo('ARREGLO2',[$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 35:
this.$= nodobase.nuevonodo('LET',[$$[$0]],yylineno);
break;
case 36:
this.$= nodobase.nuevonodo('CONST',[$$[$0]],yylineno);
break;
case 37:
this.$=nodobase.nuevonodo('ASIGNACION',[$$[$0-2],$$[$0-1],$$[$0]],yylineno)
break;
case 38:
this.$=nodobase.nuevonodo('IF_SIMPLE',[$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno)
break;
case 39:
this.$=nodobase.nuevonodo('IF_ELSE',[$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno)
break;
case 40:
this.$=nodobase.nuevonodo('ELSE_IF',[$$[$0-1],$$[$0]],yylineno)
break;
case 41:
this.$=nodobase.nuevonodo('ELSE',[$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno)
break;
case 42:
this.$=nodobase.nuevonodo('SWITCH',[$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 43:
$$[$0-1].hijos.push($$[$0]); this.$=$$[$0-1];
break;
case 44:
this.$=nodobase.nuevonodo('LISTA_CASOS',[$$[$0]],yylineno);
break;
case 45:
this.$= nodobase.nuevonodo('CASE',[$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 46:
this.$= nodobase.nuevonodo('CASE_DEFAULT',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 47: case 48:
this.$= nodobase.nuevonodo('FOR',[$$[$0-10],$$[$0-9],$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 49:
this.$= nodobase.nuevonodo('FOR_OF',[$$[$0-9],$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 51:
this.$= nodobase.nuevonodo('WHILE',[$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 52:
this.$= nodobase.nuevonodo('DO_WHILE',[$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 53:
this.$= nodobase.nuevonodo('FUNCION',[$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 54:
this.$= nodobase.nuevonodo('FUNCION',[$$[$0-9],$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 55:
this.$= nodobase.nuevonodo('FUNCION',[$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 56:
this.$= nodobase.nuevonodo('FUNCION',[$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 57:
this.$= nodobase.nuevonodo('LLAMADA_FUNCION1',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 58:
this.$= nodobase.nuevonodo('LLAMADA_FUNCION2',[$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 60:
this.$=nodobase.nuevonodo('LISTA_PARAMETROS',[$$[$0]],yylineno);
break;
case 61:
this.$= nodobase.nuevonodo('PARAMETRO',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 62:
this.$= nodobase.nuevonodo('STRING',[$$[$0]],yylineno);
break;
case 63:
this.$= nodobase.nuevonodo('NUMBER',[$$[$0]],yylineno);
break;
case 64:
this.$= nodobase.nuevonodo('BOOLEAN',[$$[$0]],yylineno);
break;
case 65:
this.$= nodobase.nuevonodo('VOID',[$$[$0]],yylineno);
break;
case 66:
this.$= nodobase.nuevonodo('STRING[]',[$$[$0-2]],yylineno);
break;
case 67:
this.$= nodobase.nuevonodo('NUMBER[]',[$$[$0-2]],yylineno);
break;
case 68:
this.$= nodobase.nuevonodo('BOOLEAN[]',[$$[$0-2]],yylineno);
break;
case 69:
this.$= nodobase.nuevonodo('IMPRIMIR',[$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 70:
this.$= nodobase.nuevonodo('RETURN',[$$[$0-1],$$[$0]],yylineno);
break;
case 71:
this.$= nodobase.nuevonodo('RETURN',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 73:
this.$=nodobase.nuevonodo('LISTA_EXPRESIONES',[$$[$0]],yylineno);
break;
case 74:
this.$= nodobase.nuevonodo('NEGATIVO',[$$[$0-1],$$[$0]],yylineno);
break;
case 75:
this.$= nodobase.nuevonodo('MAS',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 76:
this.$= nodobase.nuevonodo('MENOS',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 77:
this.$= nodobase.nuevonodo('POR',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 78:
this.$= nodobase.nuevonodo('DIVISION',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 79:
this.$= nodobase.nuevonodo('MODULO',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 80:
this.$= nodobase.nuevonodo('EXPONENTE',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 81:
this.$= nodobase.nuevonodo('MAYORQUE',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 82:
this.$= nodobase.nuevonodo('MENORQUE',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 83:
this.$= nodobase.nuevonodo('MAYORIGUALQUE',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 84:
this.$= nodobase.nuevonodo('MENORIGUALQUE',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 85:
this.$= nodobase.nuevonodo('IGUALQUE',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 86:
this.$= nodobase.nuevonodo('DIFERENTEQUE',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 87:
this.$= nodobase.nuevonodo('AND',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 88:
this.$= nodobase.nuevonodo('OR',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 89:
this.$= nodobase.nuevonodo('NOT',[$$[$0-1],$$[$0]],yylineno);
break;
case 90:
this.$= nodobase.nuevonodo('PAREXPRESION',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 91:
this.$= nodobase.nuevonodo('TERNARIO',[$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 92:
this.$= nodobase.nuevonodo('NUMERO',[$$[$0]],yylineno);
break;
case 93:
this.$= nodobase.nuevonodo('TRUE',[$$[$0]],yylineno);
break;
case 94:
this.$= nodobase.nuevonodo('FALSE',[$$[$0]],yylineno);
break;
case 95:
this.$= nodobase.nuevonodo('COMILLA_DOBLE',[$$[$0]],yylineno);
break;
case 96:
this.$= nodobase.nuevonodo('COMILLA_SIMPLE',[$$[$0]],yylineno);
break;
case 97:
this.$= nodobase.nuevonodo('IDENTIFICADOR',[$$[$0]],yylineno);
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:$V1,23:$V2,24:18,25:$V3,33:19,43:$V4,44:$V5,45:$V6,50:$V7,55:$V8,58:$V9,59:$Va,60:$Vb,67:$Vc,69:$Vd},{1:[3]},{5:[1,31],6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:$V1,23:$V2,24:18,25:$V3,33:19,43:$V4,44:$V5,45:$V6,50:$V7,55:$V8,58:$V9,59:$Va,60:$Vb,67:$Vc,69:$Vd},o($Ve,[2,3]),{8:[1,33]},{8:[1,34]},o($Ve,[2,6]),o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,11]),{8:[1,35]},{8:[1,36]},{8:[1,37]},{20:[1,38]},{8:[1,39]},{8:[1,40]},o($Ve,[2,18]),{25:$Vf,34:41,36:42},{20:$Vg,26:$Vh,27:$Vi,28:$Vj,39:$Vk},{20:[1,49]},{20:[1,50]},{20:[1,51]},{20:[1,52]},{46:[1,53]},{28:[1,54]},{25:[1,55]},{8:[1,56],16:68,17:67,20:$Vl,25:$Vm,40:57,70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},{25:[2,35]},{25:[2,36]},{1:[2,1]},o($Ve,[2,2]),o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,12]),o($Ve,[2,13]),o($Ve,[2,14]),{21:[1,69]},o($Ve,[2,16]),o($Ve,[2,17]),{8:[2,24],35:[1,70]},o($Vu,[2,26]),o($Vu,$Vv,{37:$Vw,39:$Vx}),{16:68,17:67,20:$Vl,25:$Vm,40:73,70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},{29:[1,74],31:[1,75],32:[1,76]},{16:68,17:67,20:$Vl,21:[1,77],25:$Vm,30:78,40:79,70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},o($Vy,[2,19]),o($Vy,[2,20]),{16:68,17:67,20:$Vl,25:$Vm,40:80,70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},{16:68,17:67,20:$Vl,25:$Vm,40:81,70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},{7:82,9:83,25:[1,85],33:84,43:$V4,44:$V5},{16:68,17:67,20:$Vl,25:$Vm,40:86,70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},{4:87,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:$V1,23:$V2,24:18,25:$V3,33:19,43:$V4,44:$V5,45:$V6,50:$V7,55:$V8,58:$V9,59:$Va,60:$Vb,67:$Vc,69:$Vd},{68:[1,88]},{20:[1,89]},o($Ve,[2,70]),{8:[1,90],70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,85:$VN},{16:68,17:67,20:$Vl,25:$Vm,40:106,70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},{16:68,17:67,20:$Vl,25:$Vm,40:107,70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},{16:68,17:67,20:$Vl,25:$Vm,40:108,70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},o($VO,[2,92]),o($VO,[2,93]),o($VO,[2,94]),o($VO,[2,95]),o($VO,[2,96]),o($VO,[2,97],{20:$Vg,28:$Vj}),o($VO,[2,98]),o($VO,[2,99]),{8:[1,109]},{25:$Vf,36:110},{38:111,63:$VP,64:$VQ,65:$VR,66:$VS},{16:68,17:67,20:$Vl,25:$Vm,40:116,41:[1,117],70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},{8:[2,37],70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,85:$VN},{20:[1,118]},{20:[1,119]},o($VO,[2,23]),o($VO,[2,57]),{21:[1,120],35:$VT},o($VU,[2,73],{70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,85:$VN}),{21:[1,122],70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,85:$VN},{21:[1,123],70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,85:$VN},{8:[1,124]},{8:[1,125]},{25:[1,126],34:41,36:42},{39:$Vk},{21:[1,127],70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,85:$VN},{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:$V1,23:$V2,24:18,25:$V3,33:19,43:$V4,44:$V5,45:$V6,47:[1,128],50:$V7,55:$V8,58:$V9,59:$Va,60:$Vb,67:$Vc,69:$Vd},{20:[1,129]},{21:[1,130],25:$VV,61:131,62:132},o($Ve,[2,71]),{16:68,17:67,20:$Vl,25:$Vm,40:134,70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},{16:68,17:67,20:$Vl,25:$Vm,40:135,70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},{16:68,17:67,20:$Vl,25:$Vm,40:136,70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},{16:68,17:67,20:$Vl,25:$Vm,40:137,70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},{16:68,17:67,20:$Vl,25:$Vm,40:138,70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},{16:68,17:67,20:$Vl,25:$Vm,40:139,70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},{16:68,17:67,20:$Vl,25:$Vm,40:140,70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},{16:68,17:67,20:$Vl,25:$Vm,40:141,70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},{16:68,17:67,20:$Vl,25:$Vm,40:142,70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},{16:68,17:67,20:$Vl,25:$Vm,40:143,70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},{16:68,17:67,20:$Vl,25:$Vm,40:144,70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},{16:68,17:67,20:$Vl,25:$Vm,40:145,70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},{16:68,17:67,20:$Vl,25:$Vm,40:146,70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},{16:68,17:67,20:$Vl,25:$Vm,40:147,70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},{16:68,17:67,20:$Vl,25:$Vm,40:148,70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},o($VO,[2,74]),o($VW,[2,89],{70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK}),{21:[1,149],70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,85:$VN},o($Ve,[2,15]),o($Vu,[2,25]),o($Vu,[2,29],{39:[1,150]}),o($VX,[2,62],{41:[1,151]}),o($VX,[2,63],{41:[1,152]}),o($VX,[2,64],{41:[1,153]}),o($VX,[2,65]),o($Vu,[2,28],{70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,85:$VN}),{16:68,17:67,20:$Vl,25:$Vm,30:154,40:79,42:[1,155],70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},{16:68,17:67,20:$Vl,25:$Vm,30:156,40:79,70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},{21:[1,157]},o($VO,[2,58]),{16:68,17:67,20:$Vl,25:$Vm,40:158,70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},{46:[1,159]},{46:[1,160]},{16:68,17:67,20:$Vl,25:$Vm,40:161,70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},{16:68,17:67,20:$Vl,25:$Vm,40:162,70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},o($Vu,$Vv,{37:$Vw,39:$Vx,56:[1,163],57:[1,164]}),{46:[1,165]},{58:[1,166]},{16:68,17:67,20:$Vl,25:$Vm,40:167,70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},{37:[1,169],46:[1,168]},{21:[1,170],35:[1,171]},o($VY,[2,60]),{37:[1,172]},o($VZ,[2,75],{72:$VB,73:$VC,74:$VD,75:$VE}),o($VZ,[2,76],{72:$VB,73:$VC,74:$VD,75:$VE}),o($V_,[2,77],{75:$VE}),o($V_,[2,78],{75:$VE}),o($V_,[2,79],{75:$VE}),o($VO,[2,80]),o($V$,[2,81],{70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE}),o($V$,[2,82],{70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE}),o($V$,[2,83],{70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE}),o($V$,[2,84],{70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE}),o($V$,[2,85],{70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE}),o($V$,[2,86],{70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE}),o($VW,[2,87],{70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK}),o([8,21,35,37,42,83,85],[2,88],{70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL}),{37:[1,173],70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,85:$VN},o($VO,[2,90]),{16:68,17:67,20:$Vl,25:$Vm,40:174,41:[1,175],70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},{42:[1,176]},{42:[1,177]},{42:[1,178]},{35:$VT,42:[1,179]},o($Vu,[2,34]),{21:[1,180],35:$VT},o($VO,[2,22]),o($VU,[2,72],{70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,85:$VN}),{4:181,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:$V1,23:$V2,24:18,25:$V3,33:19,43:$V4,44:$V5,45:$V6,50:$V7,55:$V8,58:$V9,59:$Va,60:$Vb,67:$Vc,69:$Vd},{51:182,52:183,53:$V01,54:$V11},{8:[1,186],70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,85:$VN},{8:[1,187],70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,85:$VN},{25:[1,188]},{25:[1,189]},{4:190,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:$V1,23:$V2,24:18,25:$V3,33:19,43:$V4,44:$V5,45:$V6,50:$V7,55:$V8,58:$V9,59:$Va,60:$Vb,67:$Vc,69:$Vd},{20:[1,191]},{21:[1,192],70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,85:$VN},{4:193,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:$V1,23:$V2,24:18,25:$V3,33:19,43:$V4,44:$V5,45:$V6,50:$V7,55:$V8,58:$V9,59:$Va,60:$Vb,67:$Vc,69:$Vd},{38:194,63:$VP,64:$VQ,65:$VR,66:$VS},{37:[1,195],46:[1,196]},{25:$VV,62:197},{38:198,63:$VP,64:$VQ,65:$VR,66:$VS},{16:68,17:67,20:$Vl,25:$Vm,40:199,70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},o($Vu,[2,27],{70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,85:$VN}),{16:68,17:67,20:$Vl,25:$Vm,30:200,40:79,42:[1,201],70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},o($VX,[2,66]),o($VX,[2,67]),o($VX,[2,68]),o($Vu,[2,33]),o($VO,[2,21]),{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:$V1,23:$V2,24:18,25:$V3,33:19,43:$V4,44:$V5,45:$V6,47:[1,202],50:$V7,55:$V8,58:$V9,59:$Va,60:$Vb,67:$Vc,69:$Vd},{47:[1,203],52:204,53:$V01,54:$V11},o($V21,[2,44]),{16:68,17:67,20:$Vl,25:$Vm,40:205,70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},{37:[1,206]},{18:207,25:$V31},{18:209,25:$V31},{21:[1,210]},{21:[1,211]},{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:$V1,23:$V2,24:18,25:$V3,33:19,43:$V4,44:$V5,45:$V6,47:[1,212],50:$V7,55:$V8,58:$V9,59:$Va,60:$Vb,67:$Vc,69:$Vd},{16:68,17:67,20:$Vl,25:$Vm,40:213,70:$Vn,84:$Vo,86:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt},{8:[1,214]},{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:$V1,23:$V2,24:18,25:$V3,33:19,43:$V4,44:$V5,45:$V6,47:[1,215],50:$V7,55:$V8,58:$V9,59:$Va,60:$Vb,67:$Vc,69:$Vd},{46:[1,216]},{38:217,63:$VP,64:$VQ,65:$VR,66:$VS},{4:218,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:$V1,23:$V2,24:18,25:$V3,33:19,43:$V4,44:$V5,45:$V6,50:$V7,55:$V8,58:$V9,59:$Va,60:$Vb,67:$Vc,69:$Vd},o($VY,[2,59]),o($VY,[2,61]),o([8,21,35,37,42,85],[2,91],{70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM}),{35:$VT,42:[1,219]},o($Vu,[2,32]),o($Ve,[2,38],{48:220,49:[1,221]}),o($Ve,[2,42]),o($V21,[2,43]),{37:[1,222],70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,85:$VN},{4:223,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:$V1,23:$V2,24:18,25:$V3,33:19,43:$V4,44:$V5,45:$V6,50:$V7,55:$V8,58:$V9,59:$Va,60:$Vb,67:$Vc,69:$Vd},{21:[1,224]},{26:$Vh,27:$Vi},{21:[1,225]},{46:[1,226]},{47:[1,227]},o($Ve,[2,51]),{21:[1,228],70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,85:$VN},o($Ve,[2,69]),o($Ve,[2,53]),{4:229,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:$V1,23:$V2,24:18,25:$V3,33:19,43:$V4,44:$V5,45:$V6,50:$V7,55:$V8,58:$V9,59:$Va,60:$Vb,67:$Vc,69:$Vd},{46:[1,230]},{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:$V1,23:$V2,24:18,25:$V3,33:19,43:$V4,44:$V5,45:$V6,47:[1,231],50:$V7,55:$V8,58:$V9,59:$Va,60:$Vb,67:$Vc,69:$Vd},o($Vu,[2,31]),o($Ve,[2,39]),{10:232,45:$V6,46:[1,233]},{4:234,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:$V1,23:$V2,24:18,25:$V3,33:19,43:$V4,44:$V5,45:$V6,50:$V7,55:$V8,58:$V9,59:$Va,60:$Vb,67:$Vc,69:$Vd},o($V21,[2,46],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,24:18,33:19,6:32,19:$V0,22:$V1,23:$V2,25:$V3,43:$V4,44:$V5,45:$V6,50:$V7,55:$V8,58:$V9,59:$Va,60:$Vb,67:$Vc,69:$Vd}),{46:[1,235]},{46:[1,236]},{4:237,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:$V1,23:$V2,24:18,25:$V3,33:19,43:$V4,44:$V5,45:$V6,50:$V7,55:$V8,58:$V9,59:$Va,60:$Vb,67:$Vc,69:$Vd},{4:238,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:$V1,23:$V2,24:18,25:$V3,33:19,43:$V4,44:$V5,45:$V6,50:$V7,55:$V8,58:$V9,59:$Va,60:$Vb,67:$Vc,69:$Vd},o($Ve,[2,52]),{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:$V1,23:$V2,24:18,25:$V3,33:19,43:$V4,44:$V5,45:$V6,47:[1,239],50:$V7,55:$V8,58:$V9,59:$Va,60:$Vb,67:$Vc,69:$Vd},{4:240,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:$V1,23:$V2,24:18,25:$V3,33:19,43:$V4,44:$V5,45:$V6,50:$V7,55:$V8,58:$V9,59:$Va,60:$Vb,67:$Vc,69:$Vd},o($Ve,[2,55]),o($Ve,[2,40]),{4:241,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:$V1,23:$V2,24:18,25:$V3,33:19,43:$V4,44:$V5,45:$V6,50:$V7,55:$V8,58:$V9,59:$Va,60:$Vb,67:$Vc,69:$Vd},o($V21,[2,45],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,24:18,33:19,6:32,19:$V0,22:$V1,23:$V2,25:$V3,43:$V4,44:$V5,45:$V6,50:$V7,55:$V8,58:$V9,59:$Va,60:$Vb,67:$Vc,69:$Vd}),{4:242,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:$V1,23:$V2,24:18,25:$V3,33:19,43:$V4,44:$V5,45:$V6,50:$V7,55:$V8,58:$V9,59:$Va,60:$Vb,67:$Vc,69:$Vd},{4:243,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:$V1,23:$V2,24:18,25:$V3,33:19,43:$V4,44:$V5,45:$V6,50:$V7,55:$V8,58:$V9,59:$Va,60:$Vb,67:$Vc,69:$Vd},{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:$V1,23:$V2,24:18,25:$V3,33:19,43:$V4,44:$V5,45:$V6,47:[1,244],50:$V7,55:$V8,58:$V9,59:$Va,60:$Vb,67:$Vc,69:$Vd},{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:$V1,23:$V2,24:18,25:$V3,33:19,43:$V4,44:$V5,45:$V6,47:[1,245],50:$V7,55:$V8,58:$V9,59:$Va,60:$Vb,67:$Vc,69:$Vd},o($Ve,[2,56]),{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:$V1,23:$V2,24:18,25:$V3,33:19,43:$V4,44:$V5,45:$V6,47:[1,246],50:$V7,55:$V8,58:$V9,59:$Va,60:$Vb,67:$Vc,69:$Vd},{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:$V1,23:$V2,24:18,25:$V3,33:19,43:$V4,44:$V5,45:$V6,47:[1,247],50:$V7,55:$V8,58:$V9,59:$Va,60:$Vb,67:$Vc,69:$Vd},{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:$V1,23:$V2,24:18,25:$V3,33:19,43:$V4,44:$V5,45:$V6,47:[1,248],50:$V7,55:$V8,58:$V9,59:$Va,60:$Vb,67:$Vc,69:$Vd},{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:$V1,23:$V2,24:18,25:$V3,33:19,43:$V4,44:$V5,45:$V6,47:[1,249],50:$V7,55:$V8,58:$V9,59:$Va,60:$Vb,67:$Vc,69:$Vd},o($Ve,[2,49]),o($Ve,[2,50]),o($Ve,[2,54]),o($Ve,[2,41]),o($Ve,[2,47]),o($Ve,[2,48])],
defaultActions: {29:[2,35],30:[2,36],31:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

const nodobase= require('../arbolBase/nodobase').nodobase;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas		
break;
case 3:return 22;
break;
case 4:return 23;
break;
case 5:return 69;
break;
case 6:return 63;
break;
case 7:return 64;
break;
case 8:return 65;
break;
case 9:return 87;
break;
case 10:return 88;
break;
case 11:return 66;
break;
case 12:return 'RARRAY';
break;
case 13:return 19;
break;
case 14:return 60;
break;
case 15:return 67;
break;
case 16:return 68;
break;
case 17:return 29;
break;
case 18:return 31;
break;
case 19:return 32;
break;
case 20:return 43;
break;
case 21:return 44;
break;
case 22:return 45;
break;
case 23:return 49;
break;
case 24:return 58;
break;
case 25:return 59;
break;
case 26:return 50;
break;
case 27:return 53;
break;
case 28:return 54;
break;
case 29:return 55;
break;
case 30:return 57;
break;
case 31:return 56;  
break;
case 32:return 71;
break;
case 33:return 70;
break;
case 34:return 72;
break;
case 35:return 73;
break;
case 36:return 75;
break;
case 37:return 74;
break;
case 38:return 26;
break;
case 39:return 27;
break;
case 40:return 76;
break;
case 41:return 77;
break;
case 42:return 78;
break;
case 43:return 79;
break;
case 44:return 80;
break;
case 45:return 81;
break;
case 46:return 82;
break;
case 47:return 83;
break;
case 48:return 84;
break;
case 49:return 85;
break;
case 50:return 37;
break;
case 51:return 28;
break;
case 52:return 35;
break;
case 53:return 8;
break;
case 54:return 39;
break;
case 55:return 41;
break;
case 56:return 42;
break;
case 57:return 46;
break;
case 58:return 47;
break;
case 59:return 20;
break;
case 60:return 21;
break;
case 61: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 90; 
break;
case 62: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 89; 
break;
case 63:return 86;
break;
case 64:return 25;
break;
case 65:return 5;
break;
case 66: console.error('Error Lexico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
case 67:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:break)/,/^(?:continue)/,/^(?:return)/,/^(?:string)/,/^(?:number)/,/^(?:boolean)/,/^(?:true)/,/^(?:false)/,/^(?:void)/,/^(?:Array)/,/^(?:graficar_ts)/,/^(?:function)/,/^(?:console)/,/^(?:log)/,/^(?:push)/,/^(?:pop)/,/^(?:length)/,/^(?:let)/,/^(?:const)/,/^(?:if)/,/^(?:else)/,/^(?:while)/,/^(?:do)/,/^(?:switch)/,/^(?:case)/,/^(?:default)/,/^(?:for)/,/^(?:in)/,/^(?:of)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\*\*)/,/^(?:%)/,/^(?:\+\+)/,/^(?:--)/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?::)/,/^(?:\.)/,/^(?:,)/,/^(?:;)/,/^(?:=)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:'[^\']*')/,/^(?:"[^\"]*")/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = matrioshts;
exports.Parser = matrioshts.Parser;
exports.parse = function () { return matrioshts.parse.apply(matrioshts, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}