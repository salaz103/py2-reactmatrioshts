/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ejecutar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,15],$V2=[1,16],$V3=[1,17],$V4=[1,28],$V5=[1,30],$V6=[1,31],$V7=[1,21],$V8=[1,22],$V9=[1,23],$Va=[1,24],$Vb=[1,25],$Vc=[1,27],$Vd=[1,26],$Ve=[1,29],$Vf=[5,12,19,22,23,26,44,45,46,48,52,55,56,57,60,61,62,70,72],$Vg=[1,44],$Vh=[1,52],$Vi=[1,54],$Vj=[1,55],$Vk=[1,53],$Vl=[1,56],$Vm=[1,62],$Vn=[1,60],$Vo=[1,59],$Vp=[1,61],$Vq=[1,63],$Vr=[1,64],$Vs=[1,65],$Vt=[1,66],$Vu=[1,67],$Vv=[8,36],$Vw=[2,31],$Vx=[1,72],$Vy=[1,73],$Vz=[8,21],$VA=[1,93],$VB=[1,92],$VC=[1,94],$VD=[1,95],$VE=[1,96],$VF=[1,97],$VG=[1,98],$VH=[1,99],$VI=[1,100],$VJ=[1,101],$VK=[1,102],$VL=[1,103],$VM=[1,104],$VN=[1,105],$VO=[1,106],$VP=[8,21,36,38,43,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88],$VQ=[1,115],$VR=[1,116],$VS=[1,117],$VT=[1,118],$VU=[1,119],$VV=[1,133],$VW=[1,135],$VX=[21,36,43],$VY=[8,21,36,38,43,85,86,88],$VZ=[8,21,36,40,47],$V_=[21,36],$V$=[8,21,36,38,43,73,74,79,80,81,82,83,84,85,86,88],$V01=[8,21,36,38,43,73,74,75,76,77,79,80,81,82,83,84,85,86,88],$V11=[8,21,36,38,43,79,80,81,82,83,84,85,86,88],$V21=[1,187],$V31=[1,188],$V41=[48,55,56],$V51=[1,212],$V61=[1,225];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"s":3,"lista":4,"EOF":5,"instruccion":6,"declaraciones":7,"RPUNTOCOMA":8,"instruccionif":9,"instruccionswitch":10,"instruccionfor":11,"declaracionarreglo":12,"instruccionwhile":13,"imprimir":14,"declararfuncion":15,"llamarfuncion":16,"nativa":17,"masmenos":18,"RGRAFICAR":19,"RPARA":20,"RPARC":21,"RBREAK":22,"RCONTINUE":23,"instruccionreturn":24,"asignacion":25,"IDENTIFICADOR":26,"RMASMAS":27,"RMENOSMENOS":28,"RPUNTO":29,"RPUSH":30,"listaexpresiones":31,"RPOP":32,"RLENGTH":33,"tipovariable":34,"listavariables":35,"RCOMA":36,"variable":37,"RDOSPUNTOS":38,"tipodato":39,"RIGUAL":40,"expresion":41,"RCORCHETEA":42,"RCORCHETEC":43,"RLET":44,"RCONST":45,"RIF":46,"RLLAVEA":47,"RLLAVEC":48,"instruccionelseif":49,"RELSE":50,"instruccionelse":51,"RSWITCH":52,"casos":53,"caso":54,"RCASE":55,"RDEFAULT":56,"RFOR":57,"ROF":58,"RIN":59,"RWHILE":60,"RDO":61,"RFUNCTION":62,"parametros":63,"parametro":64,"RSTRING":65,"RNUMBER":66,"RBOOLEAN":67,"RVOID":68,"RARRAY":69,"RCONSOLE":70,"RLOG":71,"RRETURN":72,"RMENOS":73,"RMAS":74,"RPOR":75,"RDIVISION":76,"RMODULO":77,"REXPONENTE":78,"RMAYORQUE":79,"RMENORQUE":80,"RMAYORIGUALQUE":81,"RMENORIGUALQUE":82,"RIGUALQUE":83,"RDIFERENTEQUE":84,"RAND":85,"ROR":86,"RNOT":87,"RINTERROGACION":88,"NUM":89,"RTRUE":90,"RFALSE":91,"CADENACOMILLADOBLE":92,"CADENACOMILLASIMPLE":93,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"RPUNTOCOMA",12:"declaracionarreglo",19:"RGRAFICAR",20:"RPARA",21:"RPARC",22:"RBREAK",23:"RCONTINUE",26:"IDENTIFICADOR",27:"RMASMAS",28:"RMENOSMENOS",29:"RPUNTO",30:"RPUSH",32:"RPOP",33:"RLENGTH",36:"RCOMA",38:"RDOSPUNTOS",40:"RIGUAL",42:"RCORCHETEA",43:"RCORCHETEC",44:"RLET",45:"RCONST",46:"RIF",47:"RLLAVEA",48:"RLLAVEC",50:"RELSE",52:"RSWITCH",55:"RCASE",56:"RDEFAULT",57:"RFOR",58:"ROF",59:"RIN",60:"RWHILE",61:"RDO",62:"RFUNCTION",65:"RSTRING",66:"RNUMBER",67:"RBOOLEAN",68:"RVOID",69:"RARRAY",70:"RCONSOLE",71:"RLOG",72:"RRETURN",73:"RMENOS",74:"RMAS",75:"RPOR",76:"RDIVISION",77:"RMODULO",78:"REXPONENTE",79:"RMAYORQUE",80:"RMENORQUE",81:"RMAYORIGUALQUE",82:"RMENORIGUALQUE",83:"RIGUALQUE",84:"RDIFERENTEQUE",85:"RAND",86:"ROR",87:"RNOT",88:"RINTERROGACION",89:"NUM",90:"RTRUE",91:"RFALSE",92:"CADENACOMILLADOBLE",93:"CADENACOMILLASIMPLE"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,4],[6,2],[6,2],[6,1],[6,2],[18,2],[18,2],[17,6],[17,5],[17,3],[7,2],[35,3],[35,1],[37,5],[37,3],[37,3],[37,1],[37,7],[37,6],[37,5],[37,4],[34,1],[34,1],[25,3],[9,7],[9,8],[49,8],[49,9],[49,1],[51,4],[10,7],[53,2],[53,1],[54,4],[54,3],[11,11],[11,11],[11,10],[11,10],[13,7],[13,8],[15,7],[15,10],[15,8],[15,9],[16,3],[16,4],[63,3],[63,1],[64,3],[39,1],[39,1],[39,1],[39,1],[39,1],[39,3],[39,3],[39,3],[14,7],[24,2],[24,3],[31,3],[31,1],[41,2],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,2],[41,2],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,2],[41,3],[41,5],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 46:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 27: case 47: case 63:
this.$=[$$[$0]];
break;
case 4: case 12: case 13: case 14: case 19: case 96:
this.$=$$[$0-1];
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 18: case 43: case 104: case 105:
this.$=$$[$0];
break;
case 15:
this.$= new graficar.graficar();
break;
case 16:
this.$= new instruccionbreak.instruccionbreak(tipo_instruccion.BREAK);
break;
case 17:
this.$= new instruccioncontinue.instruccioncontinue(tipo_instruccion.CONTINUE);
break;
case 20: case 85:
this.$= new incremento_decremento.incremento_decremento($$[$0-1],operador.INCREMENTO);
break;
case 21: case 86:
this.$= new incremento_decremento.incremento_decremento($$[$0-1],operador.DECREMENTO);
break;
case 22:
this.$= new nativa.nativa($$[$0-5],tipo_instruccion.PUSH,$$[$0-1]);
break;
case 23:
this.$= new nativa.nativa($$[$0-4],tipo_instruccion.POP,undefined);
break;
case 24:
this.$= new nativa.nativa($$[$0-2],tipo_instruccion.LENGTH,undefined);
break;
case 25:
this.$=new declaracion.declaracion($$[$0-1],$$[$0]);
break;
case 26: case 62: case 76:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 28:
this.$=new variable.variable(false,$$[$0-4],_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-2],$$[$0]);
break;
case 29:
this.$=new variable.variable(false,$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column,undefined,$$[$0]);
break;
case 30:
this.$=new variable.variable(false,$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column,$$[$0],undefined);
break;
case 31:
this.$=new variable.variable(false,$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 32:
this.$= new variable.variable(true,$$[$0-6],_$[$0-6].first_line,_$[$0-6].first_column,$$[$0-4],undefined,$$[$0-1]);
break;
case 33:
this.$= new variable.variable(true,$$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-3],undefined,undefined);
break;
case 34:
this.$= new variable.variable(true,$$[$0-4],_$[$0-4].first_line,_$[$0-4].first_column,undefined,undefined,$$[$0-1]);
break;
case 35:
this.$= new variable.variable(true,$$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column,undefined,undefined,undefined);
break;
case 36:
this.$=tipo_variable.LET;
break;
case 37:
this.$=tipo_variable.CONST;
break;
case 38:
this.$ = new asignacion.asignacion($$[$0-2],$$[$0]);
break;
case 39:
this.$= new instruccionif.instruccionif($$[$0-4],$$[$0-1]);
break;
case 40:
this.$= new instruccionifelse.instruccionifelse($$[$0-5],$$[$0-2],$$[$0]);
break;
case 41:
this.$= new instruccionelseif.instruccionelseif($$[$0-4],$$[$0-1],undefined);
break;
case 42:
this.$= new instruccionelseif.instruccionelseif($$[$0-5],$$[$0-2],$$[$0]);
break;
case 44:
this.$= new instruccionelse.instruccionelse($$[$0-1]);
break;
case 45:
this.$= new instruccionswitch.instruccionswitch($$[$0-4],$$[$0-1]);
break;
case 48:
this.$= new caso.caso($$[$0-2],$$[$0]);
break;
case 49:
this.$= new caso.caso(undefined,$$[$0]);
break;
case 50: case 51:
this.$= new instruccionfor.instruccionfor($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 52:
this.$= new instruccionforof.instruccionforof($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 54:
this.$= new instruccionwhile.instruccionwhile($$[$0-4],$$[$0-1]);
break;
case 55:
this.$= new instrucciondowhile.instrucciondowhile($$[$0-5],$$[$0-1]);
break;
case 56:
this.$= new declaracionfuncion.declaracionfuncion($$[$0-5],$$[$0-1],undefined,undefined);
break;
case 57:
this.$= new declaracionfuncion.declaracionfuncion($$[$0-8],$$[$0-1],$$[$0-6],$$[$0-3]);
break;
case 58:
this.$= new declaracionfuncion.declaracionfuncion($$[$0-6],$$[$0-1],$$[$0-4],undefined);
break;
case 59:
this.$= new declaracionfuncion.declaracionfuncion($$[$0-7],$$[$0-1],undefined,$$[$0-3]);
break;
case 60:
this.$= new llamarfuncion.llamarfuncion($$[$0-2],undefined);
break;
case 61:
this.$= new llamarfuncion.llamarfuncion($$[$0-3],$$[$0-1]);
break;
case 64:
this.$= new parametro.parametro($$[$0-2],$$[$0]);
break;
case 65: case 70:
this.$=tipo_valor.STRING;
break;
case 66: case 71:
this.$=tipo_valor.NUMBER;
break;
case 67: case 72:
this.$=tipo_valor.BOOLEAN;
break;
case 68:
this.$=tipo_valor.VOID;
break;
case 69:
this.$=tipo_valor.ARRAY;
break;
case 73:
this.$=new imprimir.imprimir($$[$0-2]);
break;
case 74:
this.$= new instruccionreturn.instruccionreturn(undefined);
break;
case 75:
this.$= new instruccionreturn.instruccionreturn($$[$0-1]);
break;
case 77:
this.$=[$$[$0]]
break;
case 78:
this.$= new unaria.unaria(operador.MENOS,$$[$0]);
break;
case 79:
this.$= new aritmetica.aritmetica($$[$0-2],operador.MAS,$$[$0]);
break;
case 80:
this.$= new aritmetica.aritmetica($$[$0-2],operador.MENOS,$$[$0]);
break;
case 81:
this.$= new aritmetica.aritmetica($$[$0-2],operador.POR,$$[$0]);
break;
case 82:
this.$= new aritmetica.aritmetica($$[$0-2],operador.DIVISION,$$[$0]);
break;
case 83:
this.$= new aritmetica.aritmetica($$[$0-2],operador.MODULO,$$[$0]);
break;
case 84:
this.$= new aritmetica.aritmetica($$[$0-2],operador.EXPONENTE,$$[$0]);
break;
case 87:
this.$= new relacional.relacional($$[$0-2],operador.MAYORQUE,$$[$0]);
break;
case 88:
this.$= new relacional.relacional($$[$0-2],operador.MENORQUE,$$[$0]);
break;
case 89:
this.$= new relacional.relacional($$[$0-2],operador.MAYORIGUALQUE,$$[$0]);
break;
case 90:
this.$= new relacional.relacional($$[$0-2],operador.MENORIGUALQUE,$$[$0]);
break;
case 91:
this.$= new relacional.relacional($$[$0-2],operador.IGUALQUE,$$[$0]);
break;
case 92:
this.$= new relacional.relacional($$[$0-2],operador.DIFERENTEQUE,$$[$0]);
break;
case 93:
this.$= new logica.logica($$[$0-2],operador.AND,$$[$0]);
break;
case 94:
this.$= new logica.logica($$[$0-2],operador.OR,$$[$0]);
break;
case 95:
this.$= new unaria.unaria(operador.NOT,$$[$0]);
break;
case 97:
this.$= new operadorternario.operadorternario($$[$0-4],$$[$0-2],$$[$0]);
break;
case 98:
this.$=new numero.numero(Number($$[$0]),tipo_valor.NUMBER);
break;
case 99:
this.$=new valorLogico.valorLogico("TRUE",tipo_valor.BOOLEAN);
break;
case 100:
this.$=new valorLogico.valorLogico("FALSE",tipo_valor.BOOLEAN);
break;
case 101: case 102:
this.$=new cadena.cadena($$[$0],tipo_valor.STRING);
break;
case 103:
this.$=new identificador.identificador($$[$0]);
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,22:$V2,23:$V3,24:18,25:19,26:$V4,34:20,44:$V5,45:$V6,46:$V7,52:$V8,57:$V9,60:$Va,61:$Vb,62:$Vc,70:$Vd,72:$Ve},{1:[3]},{5:[1,32],6:33,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,22:$V2,23:$V3,24:18,25:19,26:$V4,34:20,44:$V5,45:$V6,46:$V7,52:$V8,57:$V9,60:$Va,61:$Vb,62:$Vc,70:$Vd,72:$Ve},o($Vf,[2,3]),{8:[1,34]},o($Vf,[2,5]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),o($Vf,[2,11]),{8:[1,35]},{8:[1,36]},{8:[1,37]},{20:[1,38]},{8:[1,39]},{8:[1,40]},o($Vf,[2,18]),{8:[1,41]},{26:$Vg,35:42,37:43},{20:[1,45]},{20:[1,46]},{20:[1,47]},{20:[1,48]},{47:[1,49]},{29:[1,50]},{26:[1,51]},{20:$Vh,27:$Vi,28:$Vj,29:$Vk,40:$Vl},{8:[1,57],16:68,17:69,20:$Vm,26:$Vn,41:58,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{26:[2,36]},{26:[2,37]},{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,4]),o($Vf,[2,12]),o($Vf,[2,13]),o($Vf,[2,14]),{21:[1,70]},o($Vf,[2,16]),o($Vf,[2,17]),o($Vf,[2,19]),{8:[2,25],36:[1,71]},o($Vv,[2,27]),o($Vv,$Vw,{38:$Vx,40:$Vy}),{16:68,17:69,20:$Vm,26:$Vn,41:74,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{16:68,17:69,20:$Vm,26:$Vn,41:75,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{7:76,25:77,26:[1,79],34:78,44:$V5,45:$V6},{16:68,17:69,20:$Vm,26:$Vn,41:80,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{4:81,6:3,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,22:$V2,23:$V3,24:18,25:19,26:$V4,34:20,44:$V5,45:$V6,46:$V7,52:$V8,57:$V9,60:$Va,61:$Vb,62:$Vc,70:$Vd,72:$Ve},{71:[1,82]},{20:[1,83]},{16:68,17:69,20:$Vm,21:[1,84],26:$Vn,31:85,41:86,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{30:[1,87],32:[1,88],33:[1,89]},o($Vz,[2,20]),o($Vz,[2,21]),{16:68,17:69,20:$Vm,26:$Vn,41:90,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},o($Vf,[2,74]),{8:[1,91],73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO},{16:68,17:69,20:$Vm,26:$Vn,41:107,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},o($VP,[2,103],{20:$Vh,27:[1,108],28:[1,109],29:$Vk}),{16:68,17:69,20:$Vm,26:$Vn,41:110,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{16:68,17:69,20:$Vm,26:$Vn,41:111,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},o($VP,[2,98]),o($VP,[2,99]),o($VP,[2,100]),o($VP,[2,101]),o($VP,[2,102]),o($VP,[2,104]),o($VP,[2,105]),{8:[1,112]},{26:$Vg,37:113},{39:114,65:$VQ,66:$VR,67:$VS,68:$VT,69:$VU},{16:68,17:69,20:$Vm,26:$Vn,41:120,42:[1,121],73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{21:[1,122],73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO},{21:[1,123],73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO},{8:[1,124]},{8:[1,125]},{26:[1,126],35:42,37:43},{40:$Vl},{21:[1,127],73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO},{6:33,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,22:$V2,23:$V3,24:18,25:19,26:$V4,34:20,44:$V5,45:$V6,46:$V7,48:[1,128],52:$V8,57:$V9,60:$Va,61:$Vb,62:$Vc,70:$Vd,72:$Ve},{20:[1,129]},{21:[1,130],26:$VV,63:131,64:132},o($VP,[2,60]),{21:[1,134],36:$VW},o($VX,[2,77],{73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO}),{20:[1,136]},{20:[1,137]},o($VP,[2,24]),{8:[2,38],73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO},o($Vf,[2,75]),{16:68,17:69,20:$Vm,26:$Vn,41:138,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{16:68,17:69,20:$Vm,26:$Vn,41:139,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{16:68,17:69,20:$Vm,26:$Vn,41:140,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{16:68,17:69,20:$Vm,26:$Vn,41:141,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{16:68,17:69,20:$Vm,26:$Vn,41:142,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{16:68,17:69,20:$Vm,26:$Vn,41:143,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{16:68,17:69,20:$Vm,26:$Vn,41:144,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{16:68,17:69,20:$Vm,26:$Vn,41:145,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{16:68,17:69,20:$Vm,26:$Vn,41:146,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{16:68,17:69,20:$Vm,26:$Vn,41:147,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{16:68,17:69,20:$Vm,26:$Vn,41:148,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{16:68,17:69,20:$Vm,26:$Vn,41:149,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{16:68,17:69,20:$Vm,26:$Vn,41:150,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{16:68,17:69,20:$Vm,26:$Vn,41:151,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{16:68,17:69,20:$Vm,26:$Vn,41:152,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},o($VP,[2,78]),o($VP,[2,85]),o($VP,[2,86]),o($VY,[2,95],{73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL}),{21:[1,153],73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO},o($Vf,[2,15]),o($Vv,[2,26]),o($Vv,[2,30],{40:[1,154]}),o($VZ,[2,65],{42:[1,155]}),o($VZ,[2,66],{42:[1,156]}),o($VZ,[2,67],{42:[1,157]}),o($VZ,[2,68]),o($VZ,[2,69]),o($Vv,[2,29],{73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO}),{16:68,17:69,20:$Vm,26:$Vn,31:158,41:86,43:[1,159],73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{47:[1,160]},{47:[1,161]},{16:68,17:69,20:$Vm,26:$Vn,41:162,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{16:68,17:69,20:$Vm,26:$Vn,41:163,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},o($Vv,$Vw,{38:$Vx,40:$Vy,58:[1,164],59:[1,165]}),{47:[1,166]},{60:[1,167]},{16:68,17:69,20:$Vm,26:$Vn,41:168,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{38:[1,170],47:[1,169]},{21:[1,171],36:[1,172]},o($V_,[2,63]),{38:[1,173]},o($VP,[2,61]),{16:68,17:69,20:$Vm,26:$Vn,41:174,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{16:68,17:69,20:$Vm,26:$Vn,31:175,41:86,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{21:[1,176]},o($V$,[2,79],{75:$VC,76:$VD,77:$VE,78:$VF}),o($V$,[2,80],{75:$VC,76:$VD,77:$VE,78:$VF}),o($V01,[2,81],{78:$VF}),o($V01,[2,82],{78:$VF}),o($V01,[2,83],{78:$VF}),o($VP,[2,84]),o($V11,[2,87],{73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF}),o($V11,[2,88],{73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF}),o($V11,[2,89],{73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF}),o($V11,[2,90],{73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF}),o($V11,[2,91],{73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF}),o($V11,[2,92],{73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF}),o($VY,[2,93],{73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL}),o([8,21,36,38,43,86,88],[2,94],{73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM}),{38:[1,177],73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO},o($VP,[2,96]),{16:68,17:69,20:$Vm,26:$Vn,41:178,42:[1,179],73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{43:[1,180]},{43:[1,181]},{43:[1,182]},{36:$VW,43:[1,183]},o($Vv,[2,35]),{4:184,6:3,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,22:$V2,23:$V3,24:18,25:19,26:$V4,34:20,44:$V5,45:$V6,46:$V7,52:$V8,57:$V9,60:$Va,61:$Vb,62:$Vc,70:$Vd,72:$Ve},{53:185,54:186,55:$V21,56:$V31},{8:[1,189],73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO},{8:[1,190],73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO},{26:[1,191]},{26:[1,192]},{4:193,6:3,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,22:$V2,23:$V3,24:18,25:19,26:$V4,34:20,44:$V5,45:$V6,46:$V7,52:$V8,57:$V9,60:$Va,61:$Vb,62:$Vc,70:$Vd,72:$Ve},{20:[1,194]},{21:[1,195],73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO},{4:196,6:3,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,22:$V2,23:$V3,24:18,25:19,26:$V4,34:20,44:$V5,45:$V6,46:$V7,52:$V8,57:$V9,60:$Va,61:$Vb,62:$Vc,70:$Vd,72:$Ve},{39:197,65:$VQ,66:$VR,67:$VS,68:$VT,69:$VU},{38:[1,198],47:[1,199]},{26:$VV,64:200},{39:201,65:$VQ,66:$VR,67:$VS,68:$VT,69:$VU},o($VX,[2,76],{73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO}),{21:[1,202],36:$VW},o($VP,[2,23]),{16:68,17:69,20:$Vm,26:$Vn,41:203,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},o($Vv,[2,28],{73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO}),{16:68,17:69,20:$Vm,26:$Vn,31:204,41:86,43:[1,205],73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},o($VZ,[2,70]),o($VZ,[2,71]),o($VZ,[2,72]),o($Vv,[2,34]),{6:33,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,22:$V2,23:$V3,24:18,25:19,26:$V4,34:20,44:$V5,45:$V6,46:$V7,48:[1,206],52:$V8,57:$V9,60:$Va,61:$Vb,62:$Vc,70:$Vd,72:$Ve},{48:[1,207],54:208,55:$V21,56:$V31},o($V41,[2,47]),{16:68,17:69,20:$Vm,26:$Vn,41:209,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{38:[1,210]},{18:211,26:$V51},{18:213,26:$V51},{21:[1,214]},{21:[1,215]},{6:33,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,22:$V2,23:$V3,24:18,25:19,26:$V4,34:20,44:$V5,45:$V6,46:$V7,48:[1,216],52:$V8,57:$V9,60:$Va,61:$Vb,62:$Vc,70:$Vd,72:$Ve},{16:68,17:69,20:$Vm,26:$Vn,41:217,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{8:[1,218]},{6:33,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,22:$V2,23:$V3,24:18,25:19,26:$V4,34:20,44:$V5,45:$V6,46:$V7,48:[1,219],52:$V8,57:$V9,60:$Va,61:$Vb,62:$Vc,70:$Vd,72:$Ve},{47:[1,220]},{39:221,65:$VQ,66:$VR,67:$VS,68:$VT,69:$VU},{4:222,6:3,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,22:$V2,23:$V3,24:18,25:19,26:$V4,34:20,44:$V5,45:$V6,46:$V7,52:$V8,57:$V9,60:$Va,61:$Vb,62:$Vc,70:$Vd,72:$Ve},o($V_,[2,62]),o($V_,[2,64]),o($VP,[2,22]),o([8,21,36,38,43,88],[2,97],{73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN}),{36:$VW,43:[1,223]},o($Vv,[2,33]),o($Vf,[2,39],{49:224,51:226,50:$V61}),o($Vf,[2,45]),o($V41,[2,46]),{38:[1,227],73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO},{4:228,6:3,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,22:$V2,23:$V3,24:18,25:19,26:$V4,34:20,44:$V5,45:$V6,46:$V7,52:$V8,57:$V9,60:$Va,61:$Vb,62:$Vc,70:$Vd,72:$Ve},{21:[1,229]},{27:$Vi,28:$Vj},{21:[1,230]},{47:[1,231]},{48:[1,232]},o($Vf,[2,54]),{21:[1,233],73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO},o($Vf,[2,73]),o($Vf,[2,56]),{4:234,6:3,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,22:$V2,23:$V3,24:18,25:19,26:$V4,34:20,44:$V5,45:$V6,46:$V7,52:$V8,57:$V9,60:$Va,61:$Vb,62:$Vc,70:$Vd,72:$Ve},{47:[1,235]},{6:33,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,22:$V2,23:$V3,24:18,25:19,26:$V4,34:20,44:$V5,45:$V6,46:$V7,48:[1,236],52:$V8,57:$V9,60:$Va,61:$Vb,62:$Vc,70:$Vd,72:$Ve},o($Vv,[2,32]),o($Vf,[2,40]),{46:[1,237],47:[1,238]},o($Vf,[2,43]),{4:239,6:3,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,22:$V2,23:$V3,24:18,25:19,26:$V4,34:20,44:$V5,45:$V6,46:$V7,52:$V8,57:$V9,60:$Va,61:$Vb,62:$Vc,70:$Vd,72:$Ve},o($V41,[2,49],{7:4,9:5,10:6,11:7,13:9,14:10,15:11,16:12,17:13,18:14,24:18,25:19,34:20,6:33,12:$V0,19:$V1,22:$V2,23:$V3,26:$V4,44:$V5,45:$V6,46:$V7,52:$V8,57:$V9,60:$Va,61:$Vb,62:$Vc,70:$Vd,72:$Ve}),{47:[1,240]},{47:[1,241]},{4:242,6:3,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,22:$V2,23:$V3,24:18,25:19,26:$V4,34:20,44:$V5,45:$V6,46:$V7,52:$V8,57:$V9,60:$Va,61:$Vb,62:$Vc,70:$Vd,72:$Ve},{4:243,6:3,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,22:$V2,23:$V3,24:18,25:19,26:$V4,34:20,44:$V5,45:$V6,46:$V7,52:$V8,57:$V9,60:$Va,61:$Vb,62:$Vc,70:$Vd,72:$Ve},o($Vf,[2,55]),{6:33,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,22:$V2,23:$V3,24:18,25:19,26:$V4,34:20,44:$V5,45:$V6,46:$V7,48:[1,244],52:$V8,57:$V9,60:$Va,61:$Vb,62:$Vc,70:$Vd,72:$Ve},{4:245,6:3,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,22:$V2,23:$V3,24:18,25:19,26:$V4,34:20,44:$V5,45:$V6,46:$V7,52:$V8,57:$V9,60:$Va,61:$Vb,62:$Vc,70:$Vd,72:$Ve},o($Vf,[2,58]),{20:[1,246]},{4:247,6:3,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,22:$V2,23:$V3,24:18,25:19,26:$V4,34:20,44:$V5,45:$V6,46:$V7,52:$V8,57:$V9,60:$Va,61:$Vb,62:$Vc,70:$Vd,72:$Ve},o($V41,[2,48],{7:4,9:5,10:6,11:7,13:9,14:10,15:11,16:12,17:13,18:14,24:18,25:19,34:20,6:33,12:$V0,19:$V1,22:$V2,23:$V3,26:$V4,44:$V5,45:$V6,46:$V7,52:$V8,57:$V9,60:$Va,61:$Vb,62:$Vc,70:$Vd,72:$Ve}),{4:248,6:3,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,22:$V2,23:$V3,24:18,25:19,26:$V4,34:20,44:$V5,45:$V6,46:$V7,52:$V8,57:$V9,60:$Va,61:$Vb,62:$Vc,70:$Vd,72:$Ve},{4:249,6:3,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,22:$V2,23:$V3,24:18,25:19,26:$V4,34:20,44:$V5,45:$V6,46:$V7,52:$V8,57:$V9,60:$Va,61:$Vb,62:$Vc,70:$Vd,72:$Ve},{6:33,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,22:$V2,23:$V3,24:18,25:19,26:$V4,34:20,44:$V5,45:$V6,46:$V7,48:[1,250],52:$V8,57:$V9,60:$Va,61:$Vb,62:$Vc,70:$Vd,72:$Ve},{6:33,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,22:$V2,23:$V3,24:18,25:19,26:$V4,34:20,44:$V5,45:$V6,46:$V7,48:[1,251],52:$V8,57:$V9,60:$Va,61:$Vb,62:$Vc,70:$Vd,72:$Ve},o($Vf,[2,59]),{6:33,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,22:$V2,23:$V3,24:18,25:19,26:$V4,34:20,44:$V5,45:$V6,46:$V7,48:[1,252],52:$V8,57:$V9,60:$Va,61:$Vb,62:$Vc,70:$Vd,72:$Ve},{16:68,17:69,20:$Vm,26:$Vn,41:253,73:$Vo,87:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{6:33,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,22:$V2,23:$V3,24:18,25:19,26:$V4,34:20,44:$V5,45:$V6,46:$V7,48:[1,254],52:$V8,57:$V9,60:$Va,61:$Vb,62:$Vc,70:$Vd,72:$Ve},{6:33,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,22:$V2,23:$V3,24:18,25:19,26:$V4,34:20,44:$V5,45:$V6,46:$V7,48:[1,255],52:$V8,57:$V9,60:$Va,61:$Vb,62:$Vc,70:$Vd,72:$Ve},{6:33,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,22:$V2,23:$V3,24:18,25:19,26:$V4,34:20,44:$V5,45:$V6,46:$V7,48:[1,256],52:$V8,57:$V9,60:$Va,61:$Vb,62:$Vc,70:$Vd,72:$Ve},o($Vf,[2,52]),o($Vf,[2,53]),o($Vf,[2,57]),{21:[1,257],73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,88:$VO},o($Vf,[2,44]),o($Vf,[2,50]),o($Vf,[2,51]),{47:[1,258]},{4:259,6:3,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,22:$V2,23:$V3,24:18,25:19,26:$V4,34:20,44:$V5,45:$V6,46:$V7,52:$V8,57:$V9,60:$Va,61:$Vb,62:$Vc,70:$Vd,72:$Ve},{6:33,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,22:$V2,23:$V3,24:18,25:19,26:$V4,34:20,44:$V5,45:$V6,46:$V7,48:[1,260],52:$V8,57:$V9,60:$Va,61:$Vb,62:$Vc,70:$Vd,72:$Ve},o($Vf,[2,41],{51:226,49:261,50:$V61}),o($Vf,[2,42])],
defaultActions: {30:[2,36],31:[2,37],32:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  //***********************EXPRESIONES********************************
const cadena= require('../ArchivosTS/expresiones/cadena');
const valorLogico= require('../ArchivosTS/expresiones/valorLogico');
const numero= require('../ArchivosTS/expresiones/numero');
const aritmetica= require('../ArchivosTS/expresiones/operaciones/aritmetica');
const relacional= require('../ArchivosTS/expresiones/operaciones/relacional');
const logica= require('../ArchivosTS/expresiones/operaciones/logica');
const unaria= require('../ArchivosTS/expresiones/operaciones/unaria');
const identificador= require('../ArchivosTS/expresiones/identificador');
const operadorternario= require('../ArchivosTS/expresiones/operadorternario');
  //***********************INSTRUCCIONES***************************
const imprimir= require('../ArchivosTS/instrucciones/imprimir');
const declaracion= require('../ArchivosTS/instrucciones/declaracion');
const asignacion = require('../ArchivosTS/instrucciones/asignacion');
const instruccionif= require('../ArchivosTS/instrucciones/instruccionif');
const instruccionifelse= require('../ArchivosTS/instrucciones/instruccionifelse');
const instruccionelse= require('../ArchivosTS/instrucciones/instruccionelse');
const instruccionelseif= require('../ArchivosTS/instrucciones/instruccionelseif');
const instruccionswitch= require('../ArchivosTS/instrucciones/instruccionswitch');
const instruccionwhile= require('../ArchivosTS/instrucciones/instruccionwhile');
const incremento_decremento= require('../ArchivosTS/instrucciones/incremento_decremento');
const instrucciondowhile= require('../ArchivosTS/instrucciones/instrucciondowhile');
const graficar= require('../ArchivosTS/instrucciones/graficar');
const instruccionfor= require('../ArchivosTS/instrucciones/instruccionfor');
const instruccionbreak= require('../ArchivosTS/instrucciones/instruccionBreak');
const instruccioncontinue= require('../ArchivosTS/instrucciones/instruccioncontinue');
const instruccionreturn= require('../ArchivosTS/instrucciones/instruccionreturn');
const declaracionfuncion= require('../ArchivosTS/instrucciones/declaracionfuncion');
const llamarfuncion= require('../ArchivosTS/instrucciones/llamarfuncion');
const declaracionarreglo= require('../ArchivosTS/instrucciones/declaracionarreglo');
const nativa= require('../ArchivosTS/instrucciones/nativa');
const instruccionforof= require('../ArchivosTS/instrucciones/instruccionforof');
  //*****************************OTROS*********************************
const tipo_valor= require('../ArchivosTS/entorno/tipo').tipo_valor;
const tipo_variable= require('../ArchivosTS/entorno/tipo').tipo_variable;
const tipo_instruccion= require('../ArchivosTS/entorno/tipo').tipo_instruccion;
const operador= require('../ArchivosTS/entorno/tipo').operador;
const variable= require('../ArchivosTS/instrucciones/variable');
const caso= require('../ArchivosTS/instrucciones/caso');
const parametro= require('../ArchivosTS/instrucciones/parametro');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas		
break;
case 3:return 22;
break;
case 4:return 23;
break;
case 5:return 72;
break;
case 6:return 65;
break;
case 7:return 66;
break;
case 8:return 67;
break;
case 9:return 90;
break;
case 10:return 91;
break;
case 11:return 68;
break;
case 12:return 69;
break;
case 13:return 19;
break;
case 14:return 62;
break;
case 15:return 70;
break;
case 16:return 71;
break;
case 17:return 30;
break;
case 18:return 32;
break;
case 19:return 33;
break;
case 20:return 44;
break;
case 21:return 45;
break;
case 22:return 46;
break;
case 23:return 50;
break;
case 24:return 60;
break;
case 25:return 61;
break;
case 26:return 52;
break;
case 27:return 55;
break;
case 28:return 56;
break;
case 29:return 57;
break;
case 30:return 59;
break;
case 31:return 58;  
break;
case 32:return 74;
break;
case 33:return 73;
break;
case 34:return 75;
break;
case 35:return 76;
break;
case 36:return 78;
break;
case 37:return 77;
break;
case 38:return 27;
break;
case 39:return 28;
break;
case 40:return 79;
break;
case 41:return 80;
break;
case 42:return 81;
break;
case 43:return 82;
break;
case 44:return 83;
break;
case 45:return 84;
break;
case 46:return 85;
break;
case 47:return 86;
break;
case 48:return 87;
break;
case 49:return 88;
break;
case 50:return 38;
break;
case 51:return 29;
break;
case 52:return 36;
break;
case 53:return 8;
break;
case 54:return 40;
break;
case 55:return 42;
break;
case 56:return 43;
break;
case 57:return 47;
break;
case 58:return 48;
break;
case 59:return 20;
break;
case 60:return 21;
break;
case 61: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 93; 
break;
case 62: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 92; 
break;
case 63:return 89;
break;
case 64:return 26;
break;
case 65:return 5;
break;
case 66: console.error('Error Lexico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
case 67:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:break)/,/^(?:continue)/,/^(?:return)/,/^(?:string)/,/^(?:number)/,/^(?:boolean)/,/^(?:true)/,/^(?:false)/,/^(?:void)/,/^(?:Array)/,/^(?:graficar_ts)/,/^(?:function)/,/^(?:console)/,/^(?:log)/,/^(?:push)/,/^(?:pop)/,/^(?:length)/,/^(?:let)/,/^(?:const)/,/^(?:if)/,/^(?:else)/,/^(?:while)/,/^(?:do)/,/^(?:switch)/,/^(?:case)/,/^(?:default)/,/^(?:for)/,/^(?:in)/,/^(?:of)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\*\*)/,/^(?:%)/,/^(?:\+\+)/,/^(?:--)/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?::)/,/^(?:\.)/,/^(?:,)/,/^(?:;)/,/^(?:=)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:'[^\']*')/,/^(?:"[^\"]*")/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ejecutar;
exports.Parser = ejecutar.Parser;
exports.parse = function () { return ejecutar.parse.apply(ejecutar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}