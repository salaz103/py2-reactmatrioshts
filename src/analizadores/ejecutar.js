/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ejecutar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,13],$V2=[1,14],$V3=[1,15],$V4=[1,27],$V5=[1,29],$V6=[1,30],$V7=[1,20],$V8=[1,21],$V9=[1,22],$Va=[1,23],$Vb=[1,24],$Vc=[1,26],$Vd=[1,25],$Ve=[1,28],$Vf=[2,5,17,20,21,24,25,39,40,41,44,47,48,49,52,53,54,63,66],$Vg=[1,44],$Vh=[1,52],$Vi=[1,53],$Vj=[1,54],$Vk=[1,55],$Vl=[1,61],$Vm=[1,59],$Vn=[1,68],$Vo=[1,58],$Vp=[1,60],$Vq=[1,62],$Vr=[1,63],$Vs=[1,64],$Vt=[1,65],$Vu=[1,66],$Vv=[1,67],$Vw=[8,30],$Vx=[1,72],$Vy=[1,73],$Vz=[8,19],$VA=[1,104],$VB=[1,90],$VC=[1,89],$VD=[1,91],$VE=[1,92],$VF=[1,93],$VG=[1,94],$VH=[1,95],$VI=[1,96],$VJ=[1,97],$VK=[1,98],$VL=[1,99],$VM=[1,100],$VN=[1,101],$VO=[1,102],$VP=[1,103],$VQ=[8,19,30,32,38,64,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82],$VR=[1,115],$VS=[1,116],$VT=[1,117],$VU=[1,118],$VV=[1,119],$VW=[1,132],$VX=[1,134],$VY=[19,30,38],$VZ=[1,152],$V_=[1,153],$V$=[1,154],$V01=[1,155],$V11=[1,156],$V21=[8,19,30,32,38,64,79,80,82],$V31=[1,162],$V41=[8,19,30,34,37,42],$V51=[19,30],$V61=[8,19,30,32,38,64,67,68,73,74,75,76,77,78,79,80,82],$V71=[8,19,30,32,38,64,67,68,69,70,71,73,74,75,76,77,78,79,80,82],$V81=[8,19,30,32,38,64,73,74,75,76,77,78,79,80,82],$V91=[8,19,30,32,38,64,77,78,79,80,82],$Va1=[1,186],$Vb1=[1,191],$Vc1=[1,192],$Vd1=[19,30,34,37],$Ve1=[24,47,48],$Vf1=[1,219];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"s":3,"lista":4,"EOF":5,"instruccion":6,"declaraciones":7,"RPUNTOCOMA":8,"instruccionif":9,"instruccionswitch":10,"instruccionfor":11,"instruccionwhile":12,"imprimir":13,"declararfuncion":14,"llamarfuncion":15,"masmenos":16,"RGRAFICAR":17,"RPARA":18,"RPARC":19,"RBREAK":20,"RCONTINUE":21,"instruccionreturn":22,"asignacion":23,"RLLAVEC":24,"IDENTIFICADOR":25,"RMASMAS":26,"RMENOSMENOS":27,"tipovariable":28,"listavariables":29,"RCOMA":30,"variable":31,"RDOSPUNTOS":32,"tipodato":33,"RIGUAL":34,"expresion":35,"dimensiones":36,"RCORCHETEA":37,"RCORCHETEC":38,"RLET":39,"RCONST":40,"RIF":41,"RLLAVEA":42,"RELSE":43,"RSWITCH":44,"casos":45,"caso":46,"RCASE":47,"RDEFAULT":48,"RFOR":49,"ROF":50,"RIN":51,"RWHILE":52,"RDO":53,"RFUNCTION":54,"parametros":55,"listaexpresiones":56,"parametro":57,"RSTRING":58,"RNUMBER":59,"RBOOLEAN":60,"RVOID":61,"RARRAY":62,"RCONSOLE":63,"RPUNTO":64,"RLOG":65,"RRETURN":66,"RMENOS":67,"RMAS":68,"RPOR":69,"RDIVISION":70,"RMODULO":71,"REXPONENTE":72,"RMAYORQUE":73,"RMENORQUE":74,"RMAYORIGUALQUE":75,"RMENORIGUALQUE":76,"RIGUALQUE":77,"RDIFERENTEQUE":78,"RAND":79,"ROR":80,"RNOT":81,"RINTERROGACION":82,"NUM":83,"RTRUE":84,"RFALSE":85,"CADENACOMILLADOBLE":86,"CADENACOMILLASIMPLE":87,"RNEW":88,"listametodos":89,"metodos":90,"RCHARAT":91,"RTOUPPERCASE":92,"RTOLOWERCASE":93,"RCONCAT":94,"RLENGTH":95,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"RPUNTOCOMA",17:"RGRAFICAR",18:"RPARA",19:"RPARC",20:"RBREAK",21:"RCONTINUE",24:"RLLAVEC",25:"IDENTIFICADOR",26:"RMASMAS",27:"RMENOSMENOS",30:"RCOMA",32:"RDOSPUNTOS",34:"RIGUAL",37:"RCORCHETEA",38:"RCORCHETEC",39:"RLET",40:"RCONST",41:"RIF",42:"RLLAVEA",43:"RELSE",44:"RSWITCH",47:"RCASE",48:"RDEFAULT",49:"RFOR",50:"ROF",51:"RIN",52:"RWHILE",53:"RDO",54:"RFUNCTION",58:"RSTRING",59:"RNUMBER",60:"RBOOLEAN",61:"RVOID",62:"RARRAY",63:"RCONSOLE",64:"RPUNTO",65:"RLOG",66:"RRETURN",67:"RMENOS",68:"RMAS",69:"RPOR",70:"RDIVISION",71:"RMODULO",72:"REXPONENTE",73:"RMAYORQUE",74:"RMENORQUE",75:"RMAYORIGUALQUE",76:"RMENORIGUALQUE",77:"RIGUALQUE",78:"RDIFERENTEQUE",79:"RAND",80:"ROR",81:"RNOT",82:"RINTERROGACION",83:"NUM",84:"RTRUE",85:"RFALSE",86:"CADENACOMILLADOBLE",87:"CADENACOMILLASIMPLE",88:"RNEW",91:"RCHARAT",92:"RTOUPPERCASE",93:"RTOLOWERCASE",94:"RCONCAT",95:"RLENGTH"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,4],[6,2],[6,2],[6,1],[6,2],[6,2],[6,2],[16,2],[16,2],[7,2],[29,3],[29,1],[31,5],[31,3],[31,6],[31,3],[36,3],[36,2],[28,1],[28,1],[23,3],[9,7],[9,11],[9,9],[10,7],[45,2],[45,1],[46,4],[46,3],[11,11],[11,11],[11,10],[11,10],[12,7],[12,8],[14,10],[14,9],[15,3],[15,4],[55,3],[55,1],[57,3],[57,4],[33,1],[33,1],[33,1],[33,1],[33,1],[13,7],[22,2],[22,3],[56,3],[56,1],[35,2],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,2],[35,2],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,2],[35,3],[35,5],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,5],[35,3],[35,1],[35,3],[89,3],[89,1],[90,4],[90,3],[90,3],[90,4],[90,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 38:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 24: case 39: case 53:
this.$=[$$[$0]];
break;
case 4: case 17: case 84:
this.$=$$[$0-1];
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 16: case 94:
this.$=$$[$0];
break;
case 11:
this.$= new instruccionllamarfuncion.instruccionllamarfuncion($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 12:
this.$= new instruccionmasmenos.instruccionmasmenos($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 14:
this.$= new instruccionbreak.instruccionbreak(_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 15:
this.$= new instruccioncontinue.instruccioncontinue(_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 18: case 19:
  
              const e= new error.error("SINTACTICO","Revisar error Sintactico: "+yytext,this._$.first_line,this._$.first_column);
              lista.listaerrores.obtenerLista().guardar(e);
            
break;
case 20: case 73:
this.$= new incremento_decremento.incremento_decremento($$[$0-1],operador.INCREMENTO,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 21: case 74:
this.$= new incremento_decremento.incremento_decremento($$[$0-1],operador.DECREMENTO,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 22:
this.$=new declaracion.declaracion($$[$0-1],$$[$0]);
break;
case 23: case 52: case 64: case 96:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 25:
this.$=new variable.variable($$[$0-4],$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column,$$[$0],false,null);
break;
case 26:
this.$=new variable.variable($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,null,false,null);
break;
case 27:
this.$=new variable.variable($$[$0-5],$$[$0-3],_$[$0-5].first_line,_$[$0-5].first_column,$$[$0],true,$$[$0-2]);
break;
case 29:
this.$=$$[$0-2]+1;
break;
case 30:
this.$=1;
break;
case 31:
this.$=tipo_variable.LET;
break;
case 32:
this.$=tipo_variable.CONST;
break;
case 33:
this.$ = new asignacion.asignacion($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 34:
this.$= new instruccionif.instruccionif($$[$0-4],$$[$0-1],null,_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 35:
this.$= new instruccionif.instruccionif($$[$0-8],$$[$0-5],$$[$0-1],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 36:
this.$= new instruccionif.instruccionif($$[$0-6],$$[$0-3],$$[$0],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 37:
this.$= new instruccionswitch.instruccionswitch($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 40:
this.$= new caso.caso($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 41:
this.$= new caso.caso(null,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 42: case 43:
this.$= new instruccionfor.instruccionfor($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 46:
this.$= new instruccionwhile.instruccionwhile($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 47:
this.$= new instrucciondowhile.instrucciondowhile($$[$0-5],$$[$0-1],_$[$0-7].first_line,_$[$0-7].first_column);
break;
case 48:
this.$= new declaracionfuncion.declaracionfuncion($$[$0-8],$$[$0-6],$$[$0-3],$$[$0-1],_$[$0-9].first_line,_$[$0-9].first_column);
break;
case 49:
this.$= new declaracionfuncion.declaracionfuncion($$[$0-7],null,$$[$0-3],$$[$0-1],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 50:
this.$= new llamarfuncion.llamarfuncion($$[$0-2],undefined,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 51:
this.$= new llamarfuncion.llamarfuncion($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 54:
this.$= new parametro.parametro($$[$0-2],$$[$0],false,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 55:
this.$= new parametro.parametro($$[$0-3],$$[$0-1],true,_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 56:
this.$=tipo_dato.STRING;
break;
case 57:
this.$=tipo_dato.NUMBER;
break;
case 58:
this.$=tipo_dato.BOOLEAN;
break;
case 59:
this.$=tipo_dato.VOID;
break;
case 60:
this.$=tipo_dato.ARRAY;
break;
case 61:
this.$=new imprimir.imprimir($$[$0-2],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 62:
this.$= new instruccionreturn.instruccionreturn(null,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 63:
this.$= new instruccionreturn.instruccionreturn($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 65: case 97:
this.$=[$$[$0]]
break;
case 66:
this.$= new unaria.unaria(operador.MENOS,$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 67:
this.$= new aritmetica.aritmetica($$[$0-2],operador.MAS,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 68:
this.$= new aritmetica.aritmetica($$[$0-2],operador.MENOS,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 69:
this.$= new aritmetica.aritmetica($$[$0-2],operador.POR,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 70:
this.$= new aritmetica.aritmetica($$[$0-2],operador.DIVISION,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 71:
this.$= new aritmetica.aritmetica($$[$0-2],operador.MODULO,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 72:
this.$= new aritmetica.aritmetica($$[$0-2],operador.EXPONENTE,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 75:
this.$= new relacional.relacional($$[$0-2],operador.MAYORQUE,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 76:
this.$= new relacional.relacional($$[$0-2],operador.MENORQUE,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 77:
this.$= new relacional.relacional($$[$0-2],operador.MAYORIGUALQUE,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 78:
this.$= new relacional.relacional($$[$0-2],operador.MENORIGUALQUE,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 79:
this.$= new igualdad.igualdad($$[$0-2],operador.IGUALQUE,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 80:
this.$= new diferenteque.diferenteque($$[$0-2],operador.DIFERENTEQUE,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 81:
this.$= new logica.logica($$[$0-2],operador.AND,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 82:
this.$= new logica.logica($$[$0-2],operador.OR,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 83:
this.$= new unaria.unaria(operador.NOT,$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 85:
this.$= new operadorternario.operadorternario($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 86:
this.$=new numero.numero($$[$0],tipo_dato.NUMBER,_$[$0].first_line,_$[$0].first_column);
break;
case 87:
this.$=new valorLogico.valorLogico("TRUE",tipo_dato.BOOLEAN,_$[$0].first_line,_$[$0].first_column);
break;
case 88:
this.$=new valorLogico.valorLogico("FALSE",tipo_dato.BOOLEAN,_$[$0].first_line,_$[$0].first_column);
break;
case 89: case 90:
this.$=new cadena.cadena($$[$0],tipo_dato.STRING,_$[$0].first_line,_$[$0].first_column);
break;
case 91:
this.$=new identificador.identificador($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 92:
this.$= new newArray.newArray($$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 93:
this.$= new arreglo.arreglo($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 95:
this.$= new nativastring.nativastring($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 98:
this.$= new stringmetodos.stringmetodos(tipo_metodo.CHARAT,$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 99:
this.$= new stringmetodos.stringmetodos(tipo_metodo.TOUPPERCASE,null,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 100:
this.$= new stringmetodos.stringmetodos(tipo_metodo.TOLOWERCASE,null,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 101:
this.$= new stringmetodos.stringmetodos(tipo_metodo.CONCAT,$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 102:
this.$= new stringmetodos.stringmetodos(tipo_metodo.LENGTH,null,_$[$0].first_line,_$[$0].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,20:$V2,21:$V3,22:16,23:17,25:$V4,28:19,39:$V5,40:$V6,41:$V7,44:$V8,49:$V9,52:$Va,53:$Vb,54:$Vc,63:$Vd,66:$Ve},{1:[3]},{2:$V0,5:[1,31],6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,20:$V2,21:$V3,22:16,23:17,25:$V4,28:19,39:$V5,40:$V6,41:$V7,44:$V8,49:$V9,52:$Va,53:$Vb,54:$Vc,63:$Vd,66:$Ve},o($Vf,[2,3]),{8:[1,33]},o($Vf,[2,5]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),{8:[1,34]},{8:[1,35]},{18:[1,36]},{8:[1,37]},{8:[1,38]},o($Vf,[2,16]),{8:[1,39]},{8:[1,40],24:[1,41]},{25:$Vg,29:42,31:43},{18:[1,45]},{18:[1,46]},{18:[1,47]},{18:[1,48]},{42:[1,49]},{64:[1,50]},{25:[1,51]},{18:$Vh,26:$Vi,27:$Vj,34:$Vk},{8:[1,56],15:69,18:$Vl,25:$Vm,35:57,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},{25:[2,31]},{25:[2,32]},{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,4]),o($Vf,[2,11]),o($Vf,[2,12]),{19:[1,70]},o($Vf,[2,14]),o($Vf,[2,15]),o($Vf,[2,17]),o($Vf,[2,18]),o($Vf,[2,19]),{8:[2,22],30:[1,71]},o($Vw,[2,24]),{32:$Vx,34:$Vy},{15:69,18:$Vl,25:$Vm,35:74,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},{15:69,18:$Vl,25:$Vm,35:75,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},{7:76,23:77,25:[1,79],28:78,39:$V5,40:$V6},{15:69,18:$Vl,25:$Vm,35:80,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},{2:$V0,4:81,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,20:$V2,21:$V3,22:16,23:17,25:$V4,28:19,39:$V5,40:$V6,41:$V7,44:$V8,49:$V9,52:$Va,53:$Vb,54:$Vc,63:$Vd,66:$Ve},{65:[1,82]},{18:[1,83]},{15:69,18:$Vl,19:[1,84],25:$Vm,35:86,37:$Vn,56:85,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},o($Vz,[2,20]),o($Vz,[2,21]),{15:69,18:$Vl,25:$Vm,35:87,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},o($Vf,[2,62]),{8:[1,88],64:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,82:$VP},{15:69,18:$Vl,25:$Vm,35:105,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},o($VQ,[2,91],{18:$Vh,26:[1,106],27:[1,107]}),{15:69,18:$Vl,25:$Vm,35:108,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},{15:69,18:$Vl,25:$Vm,35:109,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},o($VQ,[2,86]),o($VQ,[2,87]),o($VQ,[2,88]),o($VQ,[2,89]),o($VQ,[2,90]),{62:[1,110]},{15:69,18:$Vl,25:$Vm,35:86,37:$Vn,56:111,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},o($VQ,[2,94]),{8:[1,112]},{25:$Vg,31:113},{33:114,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV},{15:69,18:$Vl,25:$Vm,35:120,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},{19:[1,121],64:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,82:$VP},{19:[1,122],64:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,82:$VP},{8:[1,123]},{8:[1,124]},{25:[1,125],29:42,31:43},{34:$Vk},{19:[1,126],64:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,82:$VP},{2:$V0,6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,20:$V2,21:$V3,22:16,23:17,24:[1,127],25:$V4,28:19,39:$V5,40:$V6,41:$V7,44:$V8,49:$V9,52:$Va,53:$Vb,54:$Vc,63:$Vd,66:$Ve},{18:[1,128]},{19:[1,130],25:$VW,55:129,57:131},o($VQ,[2,50]),{19:[1,133],30:$VX},o($VY,[2,65],{64:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,82:$VP}),{8:[2,33],64:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,82:$VP},o($Vf,[2,63]),{15:69,18:$Vl,25:$Vm,35:135,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},{15:69,18:$Vl,25:$Vm,35:136,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},{15:69,18:$Vl,25:$Vm,35:137,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},{15:69,18:$Vl,25:$Vm,35:138,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},{15:69,18:$Vl,25:$Vm,35:139,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},{15:69,18:$Vl,25:$Vm,35:140,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},{15:69,18:$Vl,25:$Vm,35:141,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},{15:69,18:$Vl,25:$Vm,35:142,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},{15:69,18:$Vl,25:$Vm,35:143,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},{15:69,18:$Vl,25:$Vm,35:144,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},{15:69,18:$Vl,25:$Vm,35:145,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},{15:69,18:$Vl,25:$Vm,35:146,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},{15:69,18:$Vl,25:$Vm,35:147,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},{15:69,18:$Vl,25:$Vm,35:148,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},{15:69,18:$Vl,25:$Vm,35:149,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},{89:150,90:151,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11},o($VQ,[2,66]),o($VQ,[2,73]),o($VQ,[2,74]),o($V21,[2,83],{67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM}),{19:[1,157],64:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,82:$VP},{18:[1,158]},{30:$VX,38:[1,159]},o($Vf,[2,13]),o($Vw,[2,23]),o($Vw,[2,26],{36:161,34:[1,160],37:$V31}),o($V41,[2,56]),o($V41,[2,57]),o($V41,[2,58]),o($V41,[2,59]),o($V41,[2,60]),o($Vw,[2,28],{64:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,82:$VP}),{42:[1,163]},{42:[1,164]},{15:69,18:$Vl,25:$Vm,35:165,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},{15:69,18:$Vl,25:$Vm,35:166,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},{32:$Vx,34:$Vy,50:[1,167],51:[1,168]},{42:[1,169]},{52:[1,170]},{15:69,18:$Vl,25:$Vm,35:86,37:$Vn,56:171,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},{19:[1,172],30:[1,173]},{32:[1,174]},o($V51,[2,53]),{32:[1,175]},o($VQ,[2,51]),{15:69,18:$Vl,25:$Vm,35:176,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},o($V61,[2,67],{69:$VD,70:$VE,71:$VF,72:$VG}),o($V61,[2,68],{69:$VD,70:$VE,71:$VF,72:$VG}),o($V71,[2,69],{72:$VG}),o($V71,[2,70],{72:$VG}),o($V71,[2,71],{72:$VG}),o($VQ,[2,72]),o($V81,[2,75],{67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG}),o($V81,[2,76],{67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG}),o($V81,[2,77],{67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG}),o($V81,[2,78],{67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG}),o($V91,[2,79],{67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK}),o($V91,[2,80],{67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK}),o($V21,[2,81],{67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM}),o([8,19,30,32,38,64,80,82],[2,82],{67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN}),{32:[1,177],64:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,82:$VP},o($VQ,[2,95]),o($VQ,[2,97]),{18:[1,179]},{18:[1,180]},{18:[1,181]},{18:[1,182]},o($VQ,[2,102]),o($VQ,[2,84]),{15:69,18:$Vl,25:$Vm,35:183,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},o($VQ,[2,93]),{15:69,18:$Vl,25:$Vm,35:184,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},{34:[1,185],37:$Va1},{38:[1,187]},{2:$V0,4:188,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,20:$V2,21:$V3,22:16,23:17,25:$V4,28:19,39:$V5,40:$V6,41:$V7,44:$V8,49:$V9,52:$Va,53:$Vb,54:$Vc,63:$Vd,66:$Ve},{45:189,46:190,47:$Vb1,48:$Vc1},{8:[1,193],64:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,82:$VP},{8:[1,194],64:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,82:$VP},{25:[1,195]},{25:[1,196]},{2:$V0,4:197,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,20:$V2,21:$V3,22:16,23:17,25:$V4,28:19,39:$V5,40:$V6,41:$V7,44:$V8,49:$V9,52:$Va,53:$Vb,54:$Vc,63:$Vd,66:$Ve},{18:[1,198]},{19:[1,199],30:$VX},{32:[1,200]},{25:$VW,57:201},{33:202,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV},{33:203,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV},o($VY,[2,64],{64:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,82:$VP}),{15:69,18:$Vl,25:$Vm,35:204,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},{90:205,91:$VZ,92:$V_,93:$V$,94:$V01,95:$V11},{15:69,18:$Vl,25:$Vm,35:206,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},{19:[1,207]},{19:[1,208]},{15:69,18:$Vl,25:$Vm,35:209,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},{19:[1,210],64:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,82:$VP},o($Vw,[2,25],{64:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,82:$VP}),{15:69,18:$Vl,25:$Vm,35:211,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},{38:[1,212]},o($Vd1,[2,30]),{2:$V0,6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,20:$V2,21:$V3,22:16,23:17,24:[1,213],25:$V4,28:19,39:$V5,40:$V6,41:$V7,44:$V8,49:$V9,52:$Va,53:$Vb,54:$Vc,63:$Vd,66:$Ve},{24:[1,214],46:215,47:$Vb1,48:$Vc1},o($Ve1,[2,39]),{15:69,18:$Vl,25:$Vm,35:216,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},{32:[1,217]},{16:218,25:$Vf1},{16:220,25:$Vf1},{19:[1,221]},{19:[1,222]},{2:$V0,6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,20:$V2,21:$V3,22:16,23:17,24:[1,223],25:$V4,28:19,39:$V5,40:$V6,41:$V7,44:$V8,49:$V9,52:$Va,53:$Vb,54:$Vc,63:$Vd,66:$Ve},{15:69,18:$Vl,25:$Vm,35:224,37:$Vn,67:$Vo,81:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv},{8:[1,225]},{33:226,58:$VR,59:$VS,60:$VT,61:$VU,62:$VV},o($V51,[2,52]),{42:[1,227]},o($V51,[2,54],{36:228,37:$V31}),o([8,19,30,32,38,64,82],[2,85],{67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO}),o($VQ,[2,96]),{19:[1,229],64:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,82:$VP},o($VQ,[2,99]),o($VQ,[2,100]),{19:[1,230],64:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,82:$VP},o($VQ,[2,92]),o($Vw,[2,27],{64:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,82:$VP}),o($Vd1,[2,29]),o($Vf,[2,34],{43:[1,231]}),o($Vf,[2,37]),o($Ve1,[2,38]),{32:[1,232],64:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,82:$VP},{2:$V0,4:233,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,20:$V2,21:$V3,22:16,23:17,25:$V4,28:19,39:$V5,40:$V6,41:$V7,44:$V8,49:$V9,52:$Va,53:$Vb,54:$Vc,63:$Vd,66:$Ve},{19:[1,234]},{26:$Vi,27:$Vj},{19:[1,235]},{42:[1,236]},{24:[1,237]},o($Vf,[2,46]),{19:[1,238],64:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,82:$VP},o($Vf,[2,61]),{42:[1,239]},{2:$V0,4:240,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,20:$V2,21:$V3,22:16,23:17,25:$V4,28:19,39:$V5,40:$V6,41:$V7,44:$V8,49:$V9,52:$Va,53:$Vb,54:$Vc,63:$Vd,66:$Ve},o($V51,[2,55],{37:$Va1}),o($VQ,[2,98]),o($VQ,[2,101]),{9:242,41:$V7,42:[1,241]},{2:$V0,4:243,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,20:$V2,21:$V3,22:16,23:17,25:$V4,28:19,39:$V5,40:$V6,41:$V7,44:$V8,49:$V9,52:$Va,53:$Vb,54:$Vc,63:$Vd,66:$Ve},o($Ve1,[2,41],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,22:16,23:17,28:19,6:32,2:$V0,17:$V1,20:$V2,21:$V3,25:$V4,39:$V5,40:$V6,41:$V7,44:$V8,49:$V9,52:$Va,53:$Vb,54:$Vc,63:$Vd,66:$Ve}),{42:[1,244]},{42:[1,245]},{2:$V0,4:246,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,20:$V2,21:$V3,22:16,23:17,25:$V4,28:19,39:$V5,40:$V6,41:$V7,44:$V8,49:$V9,52:$Va,53:$Vb,54:$Vc,63:$Vd,66:$Ve},{2:$V0,4:247,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,20:$V2,21:$V3,22:16,23:17,25:$V4,28:19,39:$V5,40:$V6,41:$V7,44:$V8,49:$V9,52:$Va,53:$Vb,54:$Vc,63:$Vd,66:$Ve},o($Vf,[2,47]),{2:$V0,4:248,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,20:$V2,21:$V3,22:16,23:17,25:$V4,28:19,39:$V5,40:$V6,41:$V7,44:$V8,49:$V9,52:$Va,53:$Vb,54:$Vc,63:$Vd,66:$Ve},{2:$V0,6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,20:$V2,21:$V3,22:16,23:17,24:[1,249],25:$V4,28:19,39:$V5,40:$V6,41:$V7,44:$V8,49:$V9,52:$Va,53:$Vb,54:$Vc,63:$Vd,66:$Ve},{2:$V0,4:250,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,20:$V2,21:$V3,22:16,23:17,25:$V4,28:19,39:$V5,40:$V6,41:$V7,44:$V8,49:$V9,52:$Va,53:$Vb,54:$Vc,63:$Vd,66:$Ve},o($Vf,[2,36]),o($Ve1,[2,40],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,22:16,23:17,28:19,6:32,2:$V0,17:$V1,20:$V2,21:$V3,25:$V4,39:$V5,40:$V6,41:$V7,44:$V8,49:$V9,52:$Va,53:$Vb,54:$Vc,63:$Vd,66:$Ve}),{2:$V0,4:251,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,20:$V2,21:$V3,22:16,23:17,25:$V4,28:19,39:$V5,40:$V6,41:$V7,44:$V8,49:$V9,52:$Va,53:$Vb,54:$Vc,63:$Vd,66:$Ve},{2:$V0,4:252,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,20:$V2,21:$V3,22:16,23:17,25:$V4,28:19,39:$V5,40:$V6,41:$V7,44:$V8,49:$V9,52:$Va,53:$Vb,54:$Vc,63:$Vd,66:$Ve},{2:$V0,6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,20:$V2,21:$V3,22:16,23:17,24:[1,253],25:$V4,28:19,39:$V5,40:$V6,41:$V7,44:$V8,49:$V9,52:$Va,53:$Vb,54:$Vc,63:$Vd,66:$Ve},{2:$V0,6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,20:$V2,21:$V3,22:16,23:17,24:[1,254],25:$V4,28:19,39:$V5,40:$V6,41:$V7,44:$V8,49:$V9,52:$Va,53:$Vb,54:$Vc,63:$Vd,66:$Ve},{2:$V0,6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,20:$V2,21:$V3,22:16,23:17,24:[1,255],25:$V4,28:19,39:$V5,40:$V6,41:$V7,44:$V8,49:$V9,52:$Va,53:$Vb,54:$Vc,63:$Vd,66:$Ve},o($Vf,[2,49]),{2:$V0,6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,20:$V2,21:$V3,22:16,23:17,24:[1,256],25:$V4,28:19,39:$V5,40:$V6,41:$V7,44:$V8,49:$V9,52:$Va,53:$Vb,54:$Vc,63:$Vd,66:$Ve},{2:$V0,6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,20:$V2,21:$V3,22:16,23:17,24:[1,257],25:$V4,28:19,39:$V5,40:$V6,41:$V7,44:$V8,49:$V9,52:$Va,53:$Vb,54:$Vc,63:$Vd,66:$Ve},{2:$V0,6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,20:$V2,21:$V3,22:16,23:17,24:[1,258],25:$V4,28:19,39:$V5,40:$V6,41:$V7,44:$V8,49:$V9,52:$Va,53:$Vb,54:$Vc,63:$Vd,66:$Ve},o($Vf,[2,44]),o($Vf,[2,45]),o($Vf,[2,48]),o($Vf,[2,35]),o($Vf,[2,42]),o($Vf,[2,43])],
defaultActions: {29:[2,31],30:[2,32],31:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  //ERRORES
  const error= require("../ArchivosTS/entorno/error");
  const lista= require("../ArchivosTS/entorno/listaerrores");

  //******************INSTRUCCIONES***********************************
  const imprimir= require('../ArchivosTS/instrucciones/imprimir');
  const declaracion= require('../ArchivosTS/instrucciones/declaracion'); 
  const incremento_decremento= require('../ArchivosTS/instrucciones/incremento_decremento');
  const instruccionif= require('../ArchivosTS/instrucciones/instruccionif');
  const instruccionfor= require('../ArchivosTS/instrucciones/instruccionfor');
  const instruccionwhile= require('../ArchivosTS/instrucciones/instruccionwhile');
  const instrucciondowhile= require('../ArchivosTS/instrucciones/instrucciondowhile');
  const declaracionfuncion= require('../ArchivosTS/instrucciones/declaracionfuncion');
  const instruccionreturn= require('../ArchivosTS/instrucciones/instruccionreturn');
  const llamarfuncion= require('../ArchivosTS/instrucciones/llamarfuncion');
  const instruccionllamarfuncion= require('../ArchivosTS/instrucciones/instruccionllamarfuncion');
  const instruccionswitch= require('../ArchivosTS/instrucciones/instruccionswitch');
  const instruccionbreak= require('../ArchivosTS/instrucciones/instruccionBreak');
  const instruccioncontinue= require('../ArchivosTS/instrucciones/instruccioncontinue');
  const asignacion = require('../ArchivosTS/instrucciones/asignacion');
  const instruccionmasmenos= require('../ArchivosTS/instrucciones/instruccionmasmenos');

  //******************EXPRESIONES*************************************
  const numero= require('../ArchivosTS/expresiones/numero');
  const valorLogico= require('../ArchivosTS/expresiones/valorLogico');
  const cadena= require('../ArchivosTS/expresiones/cadena');
  const aritmetica= require('../ArchivosTS/expresiones/operaciones/aritmetica');
  const identificador= require('../ArchivosTS/expresiones/identificador');
  const unaria= require('../ArchivosTS/expresiones/operaciones/unaria');
  const relacional= require('../ArchivosTS/expresiones/operaciones/relacional');
  const igualdad= require('../ArchivosTS/expresiones/operaciones/igualdad');
  const diferenteque= require('../ArchivosTS/expresiones/operaciones/diferenteque');
  const logica= require('../ArchivosTS/expresiones/operaciones/logica');
  const operadorternario= require('../ArchivosTS/expresiones/operadorternario');
  const nativastring= require('../ArchivosTS/expresiones/nativastring');
  const stringmetodos= require('../ArchivosTS/expresiones/stringmetodos');
  const newArray= require('../ArchivosTS/expresiones/newArray');
  const arreglo= require('../ArchivosTS/expresiones/arreglo');

  //******************INTERMEDIOS************************************
  const variable= require('../ArchivosTS/expresiones/variable');
  const parametro= require('../ArchivosTS/instrucciones/parametro');
  const caso= require('../ArchivosTS/instrucciones/caso');


  //****************OTROS***********************************
  const tipo_dato= require('../ArchivosTS/entorno/tipo').tipo_dato;
  const tipo_variable= require('../ArchivosTS/entorno/tipo').tipo_variable;
  const tipo_instruccion= require('../ArchivosTS/entorno/tipo').tipo_instruccion;
  const operador= require('../ArchivosTS/entorno/tipo').operador;
  const tipo_metodo= require('../ArchivosTS/entorno/tipo').tipo_metodo;

  parser.yy.parseError= function(error,hash){
    console.log(error);
  }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas		
break;
case 3:return 20;
break;
case 4:return 21;
break;
case 5:return 66;
break;
case 6:return 58;
break;
case 7:return 59;
break;
case 8:return 60;
break;
case 9:return 84;
break;
case 10:return 85;
break;
case 11:return 61;
break;
case 12:return 62;
break;
case 13:return 88;
break;
case 14:return 17;
break;
case 15:return 54;
break;
case 16:return 63;
break;
case 17:return 65;
break;
case 18:return 'RPUSH';
break;
case 19:return 'RPOP';
break;
case 20:return 95;
break;
case 21:return 91;
break;
case 22:return 93;
break;
case 23:return 92;
break;
case 24:return 94;
break;
case 25:return 39;
break;
case 26:return 40;
break;
case 27:return 41;
break;
case 28:return 43;
break;
case 29:return 52;
break;
case 30:return 53;
break;
case 31:return 44;
break;
case 32:return 47;
break;
case 33:return 48;
break;
case 34:return 49;
break;
case 35:return 51;
break;
case 36:return 50;  
break;
case 37:return 8;
break;
case 38:return 26;
break;
case 39:return 68;
break;
case 40:return 27;
break;
case 41:return 67;
break;
case 42:return 72;
break;
case 43:return 69;
break;
case 44:return 70;
break;
case 45:return 80;
break;
case 46:return 79;
break;
case 47:return 71;
break;
case 48:return 76;
break;
case 49:return 75;
break;
case 50:return 74;
break;
case 51:return 73;
break;
case 52:return 77;
break;
case 53:return 78;
break;
case 54:return 34;
break;
case 55:return 81;
break;
case 56:return 82;
break;
case 57:return 32;
break;
case 58:return 18;
break;
case 59:return 19;
break;
case 60:return 37;
break;
case 61:return 38;
break;
case 62:return 42;
break;
case 63:return 24;
break;
case 64:return 64;
break;
case 65:return 30;
break;
case 66: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2).replace("\\n", "\n").replace("\\t", "\t").replace("\\r", "\r").replace("\\\\", "\\").replace("\\\"", "\""); 
                        return 87; 
break;
case 67: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2).replace("\\n", "\n").replace("\\t", "\t").replace("\\r", "\r").replace("\\\\", "\\").replace("\\\"", "\""); 
                        return 86; 
break;
case 68:return 83;
break;
case 69:return 25;
break;
case 70:return 5;
break;
case 71: 
  const e= new error.error("Léxico","Error lexico con caracter: "+yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column);
  lista.listaerrores.obtenerLista().guardar(e);
          
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:string\b)/i,/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:void\b)/i,/^(?:Array\b)/i,/^(?:new\b)/i,/^(?:graficar_ts\b)/i,/^(?:function\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:length\b)/i,/^(?:charAt\b)/i,/^(?:toLowerCase\b)/i,/^(?:toUpperCase\b)/i,/^(?:concat\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:of\b)/i,/^(?:;)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:!)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\.)/i,/^(?:,)/i,/^(?:'[^\']*')/i,/^(?:"[^\"]*")/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ejecutar;
exports.Parser = ejecutar.Parser;
exports.parse = function () { return ejecutar.parse.apply(ejecutar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}