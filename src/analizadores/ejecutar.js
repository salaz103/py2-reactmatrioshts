/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ejecutar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,14],$V2=[1,15],$V3=[1,16],$V4=[1,28],$V5=[1,30],$V6=[1,31],$V7=[1,21],$V8=[1,22],$V9=[1,23],$Va=[1,24],$Vb=[1,25],$Vc=[1,27],$Vd=[1,26],$Ve=[1,29],$Vf=[2,5,18,21,22,25,26,48,49,50,53,56,57,58,61,62,63,71,73],$Vg=[1,46],$Vh=[1,54],$Vi=[1,56],$Vj=[1,57],$Vk=[1,55],$Vl=[1,58],$Vm=[1,64],$Vn=[1,62],$Vo=[1,65],$Vp=[1,61],$Vq=[1,63],$Vr=[1,66],$Vs=[1,67],$Vt=[1,68],$Vu=[1,69],$Vv=[8,39],$Vw=[1,74],$Vx=[1,75],$Vy=[8,20],$Vz=[1,97],$VA=[1,96],$VB=[1,98],$VC=[1,99],$VD=[1,100],$VE=[1,101],$VF=[1,102],$VG=[1,103],$VH=[1,104],$VI=[1,105],$VJ=[1,106],$VK=[1,107],$VL=[1,108],$VM=[1,109],$VN=[1,110],$VO=[8,20,39,41,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89],$VP=[1,119],$VQ=[1,120],$VR=[1,121],$VS=[1,122],$VT=[1,123],$VU=[1,136],$VV=[1,138],$VW=[20,39],$VX=[8,20,39,41,86,87,89],$VY=[1,161],$VZ=[8,20,39,43,46,51],$V_=[8,20,39,41,74,75,80,81,82,83,84,85,86,87,89],$V$=[8,20,39,41,74,75,76,77,78,80,81,82,83,84,85,86,87,89],$V01=[8,20,39,41,80,81,82,83,84,85,86,87,89],$V11=[8,20,39,41,84,85,86,87,89],$V21=[1,183],$V31=[1,188],$V41=[1,189],$V51=[20,39,43,46],$V61=[25,56,57],$V71=[1,212];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"s":3,"lista":4,"EOF":5,"instruccion":6,"declaraciones":7,"RPUNTOCOMA":8,"instruccionif":9,"instruccionswitch":10,"instruccionfor":11,"instruccionwhile":12,"imprimir":13,"declararfuncion":14,"llamarfuncion":15,"nativa":16,"masmenos":17,"RGRAFICAR":18,"RPARA":19,"RPARC":20,"RBREAK":21,"RCONTINUE":22,"instruccionreturn":23,"asignacion":24,"RLLAVEC":25,"IDENTIFICADOR":26,"RMASMAS":27,"RMENOSMENOS":28,"RPUNTO":29,"RLENGTH":30,"RCHARAT":31,"NUM":32,"RTOLOWERCASE":33,"RTOUPPERCASE":34,"RCONCAT":35,"listaexpresiones":36,"tipovariable":37,"listavariables":38,"RCOMA":39,"variable":40,"RDOSPUNTOS":41,"tipodato":42,"RIGUAL":43,"expresion":44,"dimensiones":45,"RCORCHETEA":46,"RCORCHETEC":47,"RLET":48,"RCONST":49,"RIF":50,"RLLAVEA":51,"RELSE":52,"RSWITCH":53,"casos":54,"caso":55,"RCASE":56,"RDEFAULT":57,"RFOR":58,"ROF":59,"RIN":60,"RWHILE":61,"RDO":62,"RFUNCTION":63,"parametros":64,"parametro":65,"RSTRING":66,"RNUMBER":67,"RBOOLEAN":68,"RVOID":69,"RARRAY":70,"RCONSOLE":71,"RLOG":72,"RRETURN":73,"RMENOS":74,"RMAS":75,"RPOR":76,"RDIVISION":77,"RMODULO":78,"REXPONENTE":79,"RMAYORQUE":80,"RMENORQUE":81,"RMAYORIGUALQUE":82,"RMENORIGUALQUE":83,"RIGUALQUE":84,"RDIFERENTEQUE":85,"RAND":86,"ROR":87,"RNOT":88,"RINTERROGACION":89,"RTRUE":90,"RFALSE":91,"CADENACOMILLADOBLE":92,"CADENACOMILLASIMPLE":93,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"RPUNTOCOMA",18:"RGRAFICAR",19:"RPARA",20:"RPARC",21:"RBREAK",22:"RCONTINUE",25:"RLLAVEC",26:"IDENTIFICADOR",27:"RMASMAS",28:"RMENOSMENOS",29:"RPUNTO",30:"RLENGTH",31:"RCHARAT",32:"NUM",33:"RTOLOWERCASE",34:"RTOUPPERCASE",35:"RCONCAT",39:"RCOMA",41:"RDOSPUNTOS",43:"RIGUAL",46:"RCORCHETEA",47:"RCORCHETEC",48:"RLET",49:"RCONST",50:"RIF",51:"RLLAVEA",52:"RELSE",53:"RSWITCH",56:"RCASE",57:"RDEFAULT",58:"RFOR",59:"ROF",60:"RIN",61:"RWHILE",62:"RDO",63:"RFUNCTION",66:"RSTRING",67:"RNUMBER",68:"RBOOLEAN",69:"RVOID",70:"RARRAY",71:"RCONSOLE",72:"RLOG",73:"RRETURN",74:"RMENOS",75:"RMAS",76:"RPOR",77:"RDIVISION",78:"RMODULO",79:"REXPONENTE",80:"RMAYORQUE",81:"RMENORQUE",82:"RMAYORIGUALQUE",83:"RMENORIGUALQUE",84:"RIGUALQUE",85:"RDIFERENTEQUE",86:"RAND",87:"ROR",88:"RNOT",89:"RINTERROGACION",90:"RTRUE",91:"RFALSE",92:"CADENACOMILLADOBLE",93:"CADENACOMILLASIMPLE"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,4],[6,2],[6,2],[6,1],[6,2],[6,2],[6,2],[17,2],[17,2],[16,3],[16,6],[16,5],[16,5],[16,6],[7,2],[38,3],[38,1],[40,5],[40,3],[40,6],[40,3],[45,3],[45,2],[37,1],[37,1],[24,3],[9,7],[9,11],[9,9],[10,7],[54,2],[54,1],[55,4],[55,3],[11,11],[11,11],[11,10],[11,10],[12,7],[12,8],[14,10],[14,9],[15,3],[15,4],[64,3],[64,1],[65,3],[65,4],[42,1],[42,1],[42,1],[42,1],[42,1],[13,7],[23,2],[23,3],[36,3],[36,1],[44,2],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,2],[44,2],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,2],[44,3],[44,5],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 30: case 59:
this.$=[$$[$0]];
break;
case 4: case 12: case 13: case 18: case 90:
this.$=$$[$0-1];
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 17: case 98: case 99:
this.$=$$[$0];
break;
case 11:
this.$= new instruccionllamarfuncion.instruccionllamarfuncion($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 19: case 20:
  
              const e= new error.error("SINTACTICO","Revisar error Sintactico: "+yytext,this._$.first_line,this._$.first_column);
              lista.listaerrores.obtenerLista().guardar(e);
            
break;
case 21: case 79:
this.$= new incremento_decremento.incremento_decremento($$[$0-1],operador.INCREMENTO,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 22: case 80:
this.$= new incremento_decremento.incremento_decremento($$[$0-1],operador.DECREMENTO,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 28:
this.$=new declaracion.declaracion($$[$0-1],$$[$0]);
break;
case 29: case 58: case 70:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 31:
this.$=new variable.variable($$[$0-4],$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column,$$[$0]);
break;
case 32:
this.$=new variable.variable($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,null);
break;
case 37:
this.$=tipo_variable.LET;
break;
case 38:
this.$=tipo_variable.CONST;
break;
case 40:
this.$= new instruccionif.instruccionif($$[$0-4],$$[$0-1],null,_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 41:
this.$= new instruccionif.instruccionif($$[$0-8],$$[$0-5],$$[$0-1],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 42:
this.$= new instruccionif.instruccionif($$[$0-6],$$[$0-3],$$[$0],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 48: case 49:
this.$= new instruccionfor.instruccionfor($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 52:
this.$= new instruccionwhile.instruccionwhile($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 53:
this.$= new instrucciondowhile.instrucciondowhile($$[$0-5],$$[$0-1],_$[$0-7].first_line,_$[$0-7].first_column);
break;
case 54:
this.$= new declaracionfuncion.declaracionfuncion($$[$0-8],$$[$0-6],$$[$0-3],$$[$0-1],_$[$0-9].first_line,_$[$0-9].first_column);
break;
case 55:
this.$= new declaracionfuncion.declaracionfuncion($$[$0-7],null,$$[$0-3],$$[$0-1],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 56:
this.$= new llamarfuncion.llamarfuncion($$[$0-2],undefined,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 57:
this.$= new llamarfuncion.llamarfuncion($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 60:
this.$= new parametro.parametro($$[$0-2],$$[$0],false,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 61:
this.$= new parametro.parametro($$[$0-3],$$[$0-1],true,_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 62:
this.$=tipo_dato.STRING;
break;
case 63:
this.$=tipo_dato.NUMBER;
break;
case 64:
this.$=tipo_dato.BOOLEAN;
break;
case 65:
this.$=tipo_dato.VOID;
break;
case 66:
this.$=tipo_dato.ARRAY;
break;
case 67:
this.$=new imprimir.imprimir($$[$0-2]);
break;
case 68:
this.$= new instruccionreturn.instruccionreturn(null,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 69:
this.$= new instruccionreturn.instruccionreturn($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 71:
this.$=[$$[$0]]
break;
case 72:
this.$= new unaria.unaria(operador.MENOS,$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 73:
this.$= new aritmetica.aritmetica($$[$0-2],operador.MAS,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 74:
this.$= new aritmetica.aritmetica($$[$0-2],operador.MENOS,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 75:
this.$= new aritmetica.aritmetica($$[$0-2],operador.POR,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 76:
this.$= new aritmetica.aritmetica($$[$0-2],operador.DIVISION,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 77:
this.$= new aritmetica.aritmetica($$[$0-2],operador.MODULO,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 81:
this.$= new relacional.relacional($$[$0-2],operador.MAYORQUE,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 82:
this.$= new relacional.relacional($$[$0-2],operador.MENORQUE,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 83:
this.$= new relacional.relacional($$[$0-2],operador.MAYORIGUALQUE,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 84:
this.$= new relacional.relacional($$[$0-2],operador.MENORIGUALQUE,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 85:
this.$= new igualdad.igualdad($$[$0-2],operador.IGUALQUE,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 86:
this.$= new diferenteque.diferenteque($$[$0-2],operador.DIFERENTEQUE,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 87:
this.$= new logica.logica($$[$0-2],operador.AND,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 88:
this.$= new logica.logica($$[$0-2],operador.OR,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 89:
this.$= new unaria.unaria(operador.NOT,$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 92:
this.$=new numero.numero(Number($$[$0]),tipo_dato.NUMBER,_$[$0].first_line,_$[$0].first_column);
break;
case 93:
this.$=new valorLogico.valorLogico("TRUE",tipo_dato.BOOLEAN,_$[$0].first_line,_$[$0].first_column);
break;
case 94:
this.$=new valorLogico.valorLogico("FALSE",tipo_dato.BOOLEAN,_$[$0].first_line,_$[$0].first_column);
break;
case 95: case 96:
this.$=new cadena.cadena($$[$0],tipo_dato.STRING,_$[$0].first_line,_$[$0].first_column);
break;
case 97:
this.$=new identificador.identificador($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,26:$V4,37:20,48:$V5,49:$V6,50:$V7,53:$V8,58:$V9,61:$Va,62:$Vb,63:$Vc,71:$Vd,73:$Ve},{1:[3]},{2:$V0,5:[1,32],6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,26:$V4,37:20,48:$V5,49:$V6,50:$V7,53:$V8,58:$V9,61:$Va,62:$Vb,63:$Vc,71:$Vd,73:$Ve},o($Vf,[2,3]),{8:[1,34]},o($Vf,[2,5]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),{8:[1,35]},{8:[1,36]},{8:[1,37]},{19:[1,38]},{8:[1,39]},{8:[1,40]},o($Vf,[2,17]),{8:[1,41]},{8:[1,42],25:[1,43]},{26:$Vg,38:44,40:45},{19:[1,47]},{19:[1,48]},{19:[1,49]},{19:[1,50]},{51:[1,51]},{29:[1,52]},{26:[1,53]},{19:$Vh,27:$Vi,28:$Vj,29:$Vk,43:$Vl},{8:[1,59],15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:60,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{26:[2,37]},{26:[2,38]},{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,4]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),{20:[1,72]},o($Vf,[2,15]),o($Vf,[2,16]),o($Vf,[2,18]),o($Vf,[2,19]),o($Vf,[2,20]),{8:[2,28],39:[1,73]},o($Vv,[2,30]),{41:$Vw,43:$Vx},{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:76,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:77,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{7:78,24:79,26:[1,81],37:80,48:$V5,49:$V6},{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:82,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{2:$V0,4:83,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,26:$V4,37:20,48:$V5,49:$V6,50:$V7,53:$V8,58:$V9,61:$Va,62:$Vb,63:$Vc,71:$Vd,73:$Ve},{72:[1,84]},{19:[1,85]},{15:70,16:71,19:$Vm,20:[1,86],26:$Vn,32:$Vo,36:87,44:88,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{30:[1,89],31:[1,90],33:[1,91],34:[1,92],35:[1,93]},o($Vy,[2,21]),o($Vy,[2,22]),{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:94,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},o($Vf,[2,68]),{8:[1,95],74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,89:$VN},{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:111,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},o($VO,[2,97],{19:$Vh,27:[1,112],28:[1,113],29:$Vk}),{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:114,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:115,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},o($VO,[2,92]),o($VO,[2,93]),o($VO,[2,94]),o($VO,[2,95]),o($VO,[2,96]),o($VO,[2,98]),o($VO,[2,99]),{8:[1,116]},{26:$Vg,40:117},{42:118,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT},{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:124,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{20:[1,125],74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,89:$VN},{20:[1,126],74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,89:$VN},{8:[1,127]},{8:[1,128]},{26:[1,129],38:44,40:45},{43:$Vl},{20:[1,130],74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,89:$VN},{2:$V0,6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:[1,131],26:$V4,37:20,48:$V5,49:$V6,50:$V7,53:$V8,58:$V9,61:$Va,62:$Vb,63:$Vc,71:$Vd,73:$Ve},{19:[1,132]},{20:[1,134],26:$VU,64:133,65:135},o($VO,[2,56]),{20:[1,137],39:$VV},o($VW,[2,71],{74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,89:$VN}),o($VO,[2,23]),{19:[1,139]},{19:[1,140]},{19:[1,141]},{19:[1,142]},{8:[2,39],74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,89:$VN},o($Vf,[2,69]),{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:143,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:144,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:145,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:146,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:147,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:148,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:149,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:150,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:151,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:152,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:153,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:154,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:155,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:156,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:157,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},o($VO,[2,72]),o($VO,[2,79]),o($VO,[2,80]),o($VX,[2,89],{74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK}),{20:[1,158],74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,89:$VN},o($Vf,[2,14]),o($Vv,[2,29]),o($Vv,[2,32],{45:160,43:[1,159],46:$VY}),o($VZ,[2,62]),o($VZ,[2,63]),o($VZ,[2,64]),o($VZ,[2,65]),o($VZ,[2,66]),o($Vv,[2,34],{74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,89:$VN}),{51:[1,162]},{51:[1,163]},{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:164,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:165,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{41:$Vw,43:$Vx,59:[1,166],60:[1,167]},{51:[1,168]},{61:[1,169]},{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:170,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{20:[1,171],39:[1,172]},{41:[1,173]},o($VW,[2,59]),{41:[1,174]},o($VO,[2,57]),{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:175,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{32:[1,176]},{20:[1,177]},{20:[1,178]},{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,36:179,44:88,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},o($V_,[2,73],{76:$VB,77:$VC,78:$VD,79:$VE}),o($V_,[2,74],{76:$VB,77:$VC,78:$VD,79:$VE}),o($V$,[2,75],{79:$VE}),o($V$,[2,76],{79:$VE}),o($V$,[2,77],{79:$VE}),o($VO,[2,78]),o($V01,[2,81],{74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE}),o($V01,[2,82],{74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE}),o($V01,[2,83],{74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE}),o($V01,[2,84],{74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE}),o($V11,[2,85],{74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI}),o($V11,[2,86],{74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI}),o($VX,[2,87],{74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK}),o([8,20,39,41,87,89],[2,88],{74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL}),{41:[1,180],74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,89:$VN},o($VO,[2,90]),{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:181,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{43:[1,182],46:$V21},{47:[1,184]},{2:$V0,4:185,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,26:$V4,37:20,48:$V5,49:$V6,50:$V7,53:$V8,58:$V9,61:$Va,62:$Vb,63:$Vc,71:$Vd,73:$Ve},{54:186,55:187,56:$V31,57:$V41},{8:[1,190],74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,89:$VN},{8:[1,191],74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,89:$VN},{26:[1,192]},{26:[1,193]},{2:$V0,4:194,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,26:$V4,37:20,48:$V5,49:$V6,50:$V7,53:$V8,58:$V9,61:$Va,62:$Vb,63:$Vc,71:$Vd,73:$Ve},{19:[1,195]},{20:[1,196],74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,89:$VN},{41:[1,197]},{26:$VU,65:198},{42:199,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT},{42:200,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT},o($VW,[2,70],{74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,89:$VN}),{20:[1,201]},o($VO,[2,25]),o($VO,[2,26]),{20:[1,202],39:$VV},{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:203,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},o($Vv,[2,31],{74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,89:$VN}),{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:204,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{47:[1,205]},o($V51,[2,36]),{2:$V0,6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:[1,206],26:$V4,37:20,48:$V5,49:$V6,50:$V7,53:$V8,58:$V9,61:$Va,62:$Vb,63:$Vc,71:$Vd,73:$Ve},{25:[1,207],55:208,56:$V31,57:$V41},o($V61,[2,45]),{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:209,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{41:[1,210]},{17:211,26:$V71},{17:213,26:$V71},{20:[1,214]},{20:[1,215]},{2:$V0,6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:[1,216],26:$V4,37:20,48:$V5,49:$V6,50:$V7,53:$V8,58:$V9,61:$Va,62:$Vb,63:$Vc,71:$Vd,73:$Ve},{15:70,16:71,19:$Vm,26:$Vn,32:$Vo,44:217,74:$Vp,88:$Vq,90:$Vr,91:$Vs,92:$Vt,93:$Vu},{8:[1,218]},{42:219,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT},o($VW,[2,58]),{51:[1,220]},o($VW,[2,60],{45:221,46:$VY}),o($VO,[2,24]),o($VO,[2,27]),o([8,20,39,41,89],[2,91],{74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM}),o($Vv,[2,33],{74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,89:$VN}),o($V51,[2,35]),o($Vf,[2,40],{52:[1,222]}),o($Vf,[2,43]),o($V61,[2,44]),{41:[1,223],74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,89:$VN},{2:$V0,4:224,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,26:$V4,37:20,48:$V5,49:$V6,50:$V7,53:$V8,58:$V9,61:$Va,62:$Vb,63:$Vc,71:$Vd,73:$Ve},{20:[1,225]},{27:$Vi,28:$Vj},{20:[1,226]},{51:[1,227]},{25:[1,228]},o($Vf,[2,52]),{20:[1,229],74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,89:$VN},o($Vf,[2,67]),{51:[1,230]},{2:$V0,4:231,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,26:$V4,37:20,48:$V5,49:$V6,50:$V7,53:$V8,58:$V9,61:$Va,62:$Vb,63:$Vc,71:$Vd,73:$Ve},o($VW,[2,61],{46:$V21}),{9:233,50:$V7,51:[1,232]},{2:$V0,4:234,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,26:$V4,37:20,48:$V5,49:$V6,50:$V7,53:$V8,58:$V9,61:$Va,62:$Vb,63:$Vc,71:$Vd,73:$Ve},o($V61,[2,47],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,23:17,24:18,37:20,6:33,2:$V0,18:$V1,21:$V2,22:$V3,26:$V4,48:$V5,49:$V6,50:$V7,53:$V8,58:$V9,61:$Va,62:$Vb,63:$Vc,71:$Vd,73:$Ve}),{51:[1,235]},{51:[1,236]},{2:$V0,4:237,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,26:$V4,37:20,48:$V5,49:$V6,50:$V7,53:$V8,58:$V9,61:$Va,62:$Vb,63:$Vc,71:$Vd,73:$Ve},{2:$V0,4:238,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,26:$V4,37:20,48:$V5,49:$V6,50:$V7,53:$V8,58:$V9,61:$Va,62:$Vb,63:$Vc,71:$Vd,73:$Ve},o($Vf,[2,53]),{2:$V0,4:239,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,26:$V4,37:20,48:$V5,49:$V6,50:$V7,53:$V8,58:$V9,61:$Va,62:$Vb,63:$Vc,71:$Vd,73:$Ve},{2:$V0,6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:[1,240],26:$V4,37:20,48:$V5,49:$V6,50:$V7,53:$V8,58:$V9,61:$Va,62:$Vb,63:$Vc,71:$Vd,73:$Ve},{2:$V0,4:241,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,26:$V4,37:20,48:$V5,49:$V6,50:$V7,53:$V8,58:$V9,61:$Va,62:$Vb,63:$Vc,71:$Vd,73:$Ve},o($Vf,[2,42]),o($V61,[2,46],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,23:17,24:18,37:20,6:33,2:$V0,18:$V1,21:$V2,22:$V3,26:$V4,48:$V5,49:$V6,50:$V7,53:$V8,58:$V9,61:$Va,62:$Vb,63:$Vc,71:$Vd,73:$Ve}),{2:$V0,4:242,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,26:$V4,37:20,48:$V5,49:$V6,50:$V7,53:$V8,58:$V9,61:$Va,62:$Vb,63:$Vc,71:$Vd,73:$Ve},{2:$V0,4:243,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,26:$V4,37:20,48:$V5,49:$V6,50:$V7,53:$V8,58:$V9,61:$Va,62:$Vb,63:$Vc,71:$Vd,73:$Ve},{2:$V0,6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:[1,244],26:$V4,37:20,48:$V5,49:$V6,50:$V7,53:$V8,58:$V9,61:$Va,62:$Vb,63:$Vc,71:$Vd,73:$Ve},{2:$V0,6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:[1,245],26:$V4,37:20,48:$V5,49:$V6,50:$V7,53:$V8,58:$V9,61:$Va,62:$Vb,63:$Vc,71:$Vd,73:$Ve},{2:$V0,6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:[1,246],26:$V4,37:20,48:$V5,49:$V6,50:$V7,53:$V8,58:$V9,61:$Va,62:$Vb,63:$Vc,71:$Vd,73:$Ve},o($Vf,[2,55]),{2:$V0,6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:[1,247],26:$V4,37:20,48:$V5,49:$V6,50:$V7,53:$V8,58:$V9,61:$Va,62:$Vb,63:$Vc,71:$Vd,73:$Ve},{2:$V0,6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:[1,248],26:$V4,37:20,48:$V5,49:$V6,50:$V7,53:$V8,58:$V9,61:$Va,62:$Vb,63:$Vc,71:$Vd,73:$Ve},{2:$V0,6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:[1,249],26:$V4,37:20,48:$V5,49:$V6,50:$V7,53:$V8,58:$V9,61:$Va,62:$Vb,63:$Vc,71:$Vd,73:$Ve},o($Vf,[2,50]),o($Vf,[2,51]),o($Vf,[2,54]),o($Vf,[2,41]),o($Vf,[2,48]),o($Vf,[2,49])],
defaultActions: {30:[2,37],31:[2,38],32:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  //ERRORES
  const error= require("../ArchivosTS/entorno/error");
  const lista= require("../ArchivosTS/entorno/listaerrores");

  //******************INSTRUCCIONES***********************************
  const imprimir= require('../ArchivosTS/instrucciones/imprimir');
  const declaracion= require('../ArchivosTS/instrucciones/declaracion'); 
  const incremento_decremento= require('../ArchivosTS/instrucciones/incremento_decremento');
  const instruccionif= require('../ArchivosTS/instrucciones/instruccionif');
  const instruccionfor= require('../ArchivosTS/instrucciones/instruccionfor');
  const instruccionwhile= require('../ArchivosTS/instrucciones/instruccionwhile');
  const instrucciondowhile= require('../ArchivosTS/instrucciones/instrucciondowhile');
  const declaracionfuncion= require('../ArchivosTS/instrucciones/declaracionfuncion');
  const instruccionreturn= require('../ArchivosTS/instrucciones/instruccionreturn');
  const llamarfuncion= require('../ArchivosTS/instrucciones/llamarfuncion');
  const instruccionllamarfuncion= require('../ArchivosTS/instrucciones/instruccionllamarfuncion');


  //******************EXPRESIONES*************************************
  const numero= require('../ArchivosTS/expresiones/numero');
  const valorLogico= require('../ArchivosTS/expresiones/valorLogico');
  const cadena= require('../ArchivosTS/expresiones/cadena');
  const aritmetica= require('../ArchivosTS/expresiones/operaciones/aritmetica');
  const identificador= require('../ArchivosTS/expresiones/identificador');
  const unaria= require('../ArchivosTS/expresiones/operaciones/unaria');
  const relacional= require('../ArchivosTS/expresiones/operaciones/relacional');
  const igualdad= require('../ArchivosTS/expresiones/operaciones/igualdad');
  const diferenteque= require('../ArchivosTS/expresiones/operaciones/diferenteque');
  const logica= require('../ArchivosTS/expresiones/operaciones/logica');

  //******************INTERMEDIOS************************************
  const variable= require('../ArchivosTS/expresiones/variable');
  const parametro= require('../ArchivosTS/instrucciones/parametro');



  //****************OTROS***********************************
  const tipo_dato= require('../ArchivosTS/entorno/tipo').tipo_dato;
  const tipo_variable= require('../ArchivosTS/entorno/tipo').tipo_variable;
  const tipo_instruccion= require('../ArchivosTS/entorno/tipo').tipo_instruccion;
  const operador= require('../ArchivosTS/entorno/tipo').operador;

  parser.yy.parseError= function(error,hash){
    console.log(error);
  }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas		
break;
case 3:return 21;
break;
case 4:return 22;
break;
case 5:return 73;
break;
case 6:return 66;
break;
case 7:return 67;
break;
case 8:return 68;
break;
case 9:return 90;
break;
case 10:return 91;
break;
case 11:return 69;
break;
case 12:return 70;
break;
case 13:return 18;
break;
case 14:return 63;
break;
case 15:return 71;
break;
case 16:return 72;
break;
case 17:return 'RPUSH';
break;
case 18:return 'RPOP';
break;
case 19:return 30;
break;
case 20:return 31;
break;
case 21:return 33;
break;
case 22:return 34;
break;
case 23:return 35;
break;
case 24:return 48;
break;
case 25:return 49;
break;
case 26:return 50;
break;
case 27:return 52;
break;
case 28:return 61;
break;
case 29:return 62;
break;
case 30:return 53;
break;
case 31:return 56;
break;
case 32:return 57;
break;
case 33:return 58;
break;
case 34:return 60;
break;
case 35:return 59;  
break;
case 36:return 27;
break;
case 37:return 28;
break;
case 38:return 76;
break;
case 39:return 77;
break;
case 40:return 8;
break;
case 41:return 75;
break;
case 42:return 74;
break;
case 43:return 87;
break;
case 44:return 86;
break;
case 45:return 79;
break;
case 46:return 78;
break;
case 47:return 83;
break;
case 48:return 82;
break;
case 49:return 81;
break;
case 50:return 80;
break;
case 51:return 84;
break;
case 52:return 85;
break;
case 53:return 43;
break;
case 54:return 88;
break;
case 55:return 89;
break;
case 56:return 41;
break;
case 57:return 19;
break;
case 58:return 20;
break;
case 59:return 46;
break;
case 60:return 47;
break;
case 61:return 51;
break;
case 62:return 25;
break;
case 63:return 29;
break;
case 64:return 39;
break;
case 65: yy_.yytext = yy_.yytext.slice(1,-1).replace("\\n", "\n").replace("\\t", "\t").replace("\\r", "\r").replace("\\\\", "\\").replace("\\\"", "\""); 
            return 92; 
            
break;
case 66: yy_.yytext = yy_.yytext.slice(1,-1).replace("\\n", "\n").replace("\\t", "\t").replace("\\r", "\r").replace("\\\\", "\\").replace("\\\"", "\""); 
            return 93; 
            
break;
case 67:return 32;
break;
case 68:return 26;
break;
case 69:return 5;
break;
case 70: 
  const e= new error.error("Léxico","Error lexico con caracter: "+yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column);
  lista.listaerrores.obtenerLista().guardar(e);
          
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:string\b)/i,/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:void\b)/i,/^(?:Array\b)/i,/^(?:graficar_ts\b)/i,/^(?:function\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:length\b)/i,/^(?:charAt\b)/i,/^(?:toLowerCase\b)/i,/^(?:toUpperCase\b)/i,/^(?:concat\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:of\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:;)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\*\*)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:!)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\.)/i,/^(?:,)/i,/^(?:"[^"]+")/i,/^(?:'[^"]+')/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ejecutar;
exports.Parser = ejecutar.Parser;
exports.parse = function () { return ejecutar.parse.apply(ejecutar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}