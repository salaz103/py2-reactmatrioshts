/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ejecutar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,14],$V2=[1,15],$V3=[1,16],$V4=[1,28],$V5=[1,30],$V6=[1,31],$V7=[1,21],$V8=[1,22],$V9=[1,23],$Va=[1,24],$Vb=[1,25],$Vc=[1,27],$Vd=[1,26],$Ve=[1,29],$Vf=[2,5,18,21,22,25,26,50,51,52,57,60,61,62,65,66,67,75,77],$Vg=[1,46],$Vh=[1,54],$Vi=[1,56],$Vj=[1,57],$Vk=[1,55],$Vl=[1,58],$Vm=[1,64],$Vn=[1,62],$Vo=[1,65],$Vp=[1,70],$Vq=[1,61],$Vr=[1,63],$Vs=[1,66],$Vt=[1,67],$Vu=[1,68],$Vv=[1,69],$Vw=[8,41],$Vx=[1,75],$Vy=[1,76],$Vz=[8,20],$VA=[1,100],$VB=[1,99],$VC=[1,101],$VD=[1,102],$VE=[1,103],$VF=[1,104],$VG=[1,105],$VH=[1,106],$VI=[1,107],$VJ=[1,108],$VK=[1,109],$VL=[1,110],$VM=[1,111],$VN=[1,112],$VO=[1,113],$VP=[8,20,41,43,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93],$VQ=[1,124],$VR=[1,125],$VS=[1,126],$VT=[1,127],$VU=[1,128],$VV=[1,141],$VW=[1,143],$VX=[20,41],$VY=[8,20,41,43,90,91,93],$VZ=[8,20,41,45,48,53],$V_=[8,20,41,43,78,79,84,85,86,87,88,89,90,91,93],$V$=[8,20,41,43,78,79,80,81,82,84,85,86,87,88,89,90,91,93],$V01=[8,20,41,43,84,85,86,87,88,89,90,91,93],$V11=[1,199],$V21=[1,200],$V31=[45,48],$V41=[25,60,61],$V51=[1,226],$V61=[1,238];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"s":3,"lista":4,"EOF":5,"instruccion":6,"declaraciones":7,"RPUNTOCOMA":8,"instruccionif":9,"instruccionswitch":10,"instruccionfor":11,"instruccionwhile":12,"imprimir":13,"declararfuncion":14,"llamarfuncion":15,"nativa":16,"masmenos":17,"RGRAFICAR":18,"RPARA":19,"RPARC":20,"RBREAK":21,"RCONTINUE":22,"instruccionreturn":23,"asignacion":24,"RLLAVEC":25,"IDENTIFICADOR":26,"RMASMAS":27,"RMENOSMENOS":28,"RPUNTO":29,"RPUSH":30,"listaexpresiones":31,"RPOP":32,"RLENGTH":33,"RCHARAT":34,"NUM":35,"RTOLOWERCASE":36,"RTOUPPERCASE":37,"RCONCAT":38,"tipovariable":39,"listavariables":40,"RCOMA":41,"variable":42,"RDOSPUNTOS":43,"tipodato":44,"RIGUAL":45,"expresion":46,"dimensiones":47,"RCORCHETEA":48,"RCORCHETEC":49,"RLET":50,"RCONST":51,"RIF":52,"RLLAVEA":53,"instruccionelseif":54,"RELSE":55,"instruccionelse":56,"RSWITCH":57,"casos":58,"caso":59,"RCASE":60,"RDEFAULT":61,"RFOR":62,"ROF":63,"RIN":64,"RWHILE":65,"RDO":66,"RFUNCTION":67,"parametros":68,"parametro":69,"RSTRING":70,"RNUMBER":71,"RBOOLEAN":72,"RVOID":73,"RARRAY":74,"RCONSOLE":75,"RLOG":76,"RRETURN":77,"RMENOS":78,"RMAS":79,"RPOR":80,"RDIVISION":81,"RMODULO":82,"REXPONENTE":83,"RMAYORQUE":84,"RMENORQUE":85,"RMAYORIGUALQUE":86,"RMENORIGUALQUE":87,"RIGUALQUE":88,"RDIFERENTEQUE":89,"RAND":90,"ROR":91,"RNOT":92,"RINTERROGACION":93,"RTRUE":94,"RFALSE":95,"CADENACOMILLADOBLE":96,"CADENACOMILLASIMPLE":97,"listaerrores":98,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"RPUNTOCOMA",18:"RGRAFICAR",19:"RPARA",20:"RPARC",21:"RBREAK",22:"RCONTINUE",25:"RLLAVEC",26:"IDENTIFICADOR",27:"RMASMAS",28:"RMENOSMENOS",29:"RPUNTO",30:"RPUSH",32:"RPOP",33:"RLENGTH",34:"RCHARAT",35:"NUM",36:"RTOLOWERCASE",37:"RTOUPPERCASE",38:"RCONCAT",41:"RCOMA",43:"RDOSPUNTOS",45:"RIGUAL",48:"RCORCHETEA",49:"RCORCHETEC",50:"RLET",51:"RCONST",52:"RIF",53:"RLLAVEA",55:"RELSE",57:"RSWITCH",60:"RCASE",61:"RDEFAULT",62:"RFOR",63:"ROF",64:"RIN",65:"RWHILE",66:"RDO",67:"RFUNCTION",70:"RSTRING",71:"RNUMBER",72:"RBOOLEAN",73:"RVOID",74:"RARRAY",75:"RCONSOLE",76:"RLOG",77:"RRETURN",78:"RMENOS",79:"RMAS",80:"RPOR",81:"RDIVISION",82:"RMODULO",83:"REXPONENTE",84:"RMAYORQUE",85:"RMENORQUE",86:"RMAYORIGUALQUE",87:"RMENORIGUALQUE",88:"RIGUALQUE",89:"RDIFERENTEQUE",90:"RAND",91:"ROR",92:"RNOT",93:"RINTERROGACION",94:"RTRUE",95:"RFALSE",96:"CADENACOMILLADOBLE",97:"CADENACOMILLASIMPLE",98:"listaerrores"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,4],[6,2],[6,2],[6,1],[6,2],[6,2],[6,2],[17,2],[17,2],[16,6],[16,5],[16,3],[16,6],[16,5],[16,5],[16,6],[7,2],[40,3],[40,1],[42,5],[42,3],[42,6],[42,3],[47,3],[47,2],[39,1],[39,1],[24,3],[9,7],[9,8],[54,8],[54,9],[54,1],[56,4],[10,7],[58,2],[58,1],[59,4],[59,3],[11,11],[11,11],[11,10],[11,10],[12,7],[12,8],[14,7],[14,10],[14,8],[14,9],[15,3],[15,4],[68,3],[68,1],[69,3],[44,1],[44,1],[44,1],[44,1],[44,1],[13,7],[23,2],[23,3],[31,3],[31,1],[46,2],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,2],[46,2],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,2],[46,3],[46,5],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,3],[46,2],[46,1],[46,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 4: case 11: case 12: case 13: case 18: case 96:
this.$=$$[$0-1];
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 17: case 106: case 107:
this.$=$$[$0];
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,26:$V4,39:20,50:$V5,51:$V6,52:$V7,57:$V8,62:$V9,65:$Va,66:$Vb,67:$Vc,75:$Vd,77:$Ve},{1:[3]},{2:$V0,5:[1,32],6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,26:$V4,39:20,50:$V5,51:$V6,52:$V7,57:$V8,62:$V9,65:$Va,66:$Vb,67:$Vc,75:$Vd,77:$Ve},o($Vf,[2,3]),{8:[1,34]},o($Vf,[2,5]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),{8:[1,35]},{8:[1,36]},{8:[1,37]},{19:[1,38]},{8:[1,39]},{8:[1,40]},o($Vf,[2,17]),{8:[1,41]},{8:[1,42],25:[1,43]},{26:$Vg,40:44,42:45},{19:[1,47]},{19:[1,48]},{19:[1,49]},{19:[1,50]},{53:[1,51]},{29:[1,52]},{26:[1,53]},{19:$Vh,27:$Vi,28:$Vj,29:$Vk,45:$Vl},{8:[1,59],15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:60,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},{26:[2,39]},{26:[2,40]},{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,4]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),{20:[1,73]},o($Vf,[2,15]),o($Vf,[2,16]),o($Vf,[2,18]),o($Vf,[2,19]),o($Vf,[2,20]),{8:[2,30],41:[1,74]},o($Vw,[2,32]),{43:$Vx,45:$Vy},{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:77,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:78,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},{7:79,24:80,26:[1,82],39:81,50:$V5,51:$V6},{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:83,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},{2:$V0,4:84,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,26:$V4,39:20,50:$V5,51:$V6,52:$V7,57:$V8,62:$V9,65:$Va,66:$Vb,67:$Vc,75:$Vd,77:$Ve},{76:[1,85]},{19:[1,86]},{15:71,16:72,19:$Vm,20:[1,87],26:$Vn,31:88,35:$Vo,46:89,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},{30:[1,90],32:[1,91],33:[1,92],34:[1,93],36:[1,94],37:[1,95],38:[1,96]},o($Vz,[2,21]),o($Vz,[2,22]),{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:97,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},o($Vf,[2,74]),{8:[1,98],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,93:$VO},{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:114,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},o($VP,[2,103],{19:$Vh,27:[1,115],28:[1,116],29:$Vk}),{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:117,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:118,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},o($VP,[2,98]),o($VP,[2,99]),o($VP,[2,100]),o($VP,[2,101]),o($VP,[2,102]),{49:[1,120],98:[1,119]},o($VP,[2,106]),o($VP,[2,107]),{8:[1,121]},{26:$Vg,42:122},{44:123,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU},{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:129,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},{20:[1,130],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,93:$VO},{20:[1,131],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,93:$VO},{8:[1,132]},{8:[1,133]},{26:[1,134],40:44,42:45},{45:$Vl},{20:[1,135],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,93:$VO},{2:$V0,6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:[1,136],26:$V4,39:20,50:$V5,51:$V6,52:$V7,57:$V8,62:$V9,65:$Va,66:$Vb,67:$Vc,75:$Vd,77:$Ve},{19:[1,137]},{20:[1,138],26:$VV,68:139,69:140},o($VP,[2,63]),{20:[1,142],41:$VW},o($VX,[2,77],{78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,93:$VO}),{19:[1,144]},{19:[1,145]},o($VP,[2,25]),{19:[1,146]},{19:[1,147]},{19:[1,148]},{19:[1,149]},{8:[2,41],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,93:$VO},o($Vf,[2,75]),{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:150,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:151,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:152,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:153,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:154,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:155,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:156,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:157,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:158,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:159,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:160,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:161,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:162,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:163,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:164,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},o($VP,[2,78]),o($VP,[2,85]),o($VP,[2,86]),o($VY,[2,95],{78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL}),{20:[1,165],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,93:$VO},{49:[1,166]},o($VP,[2,105]),o($Vf,[2,14]),o($Vw,[2,31]),o($Vw,[2,34],{47:168,45:[1,167],48:[1,169]}),o($VZ,[2,68]),o($VZ,[2,69]),o($VZ,[2,70]),o($VZ,[2,71]),o($VZ,[2,72]),o($Vw,[2,36],{78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,93:$VO}),{53:[1,170]},{53:[1,171]},{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:172,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:173,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},{43:$Vx,45:$Vy,63:[1,174],64:[1,175]},{53:[1,176]},{65:[1,177]},{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:178,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},{43:[1,180],53:[1,179]},{20:[1,181],41:[1,182]},o($VX,[2,66]),{43:[1,183]},o($VP,[2,64]),{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:184,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},{15:71,16:72,19:$Vm,26:$Vn,31:185,35:$Vo,46:89,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},{20:[1,186]},{35:[1,187]},{20:[1,188]},{20:[1,189]},{15:71,16:72,19:$Vm,26:$Vn,31:190,35:$Vo,46:89,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},o($V_,[2,79],{80:$VC,81:$VD,82:$VE,83:$VF}),o($V_,[2,80],{80:$VC,81:$VD,82:$VE,83:$VF}),o($V$,[2,81],{83:$VF}),o($V$,[2,82],{83:$VF}),o($V$,[2,83],{83:$VF}),o($VP,[2,84]),o($V01,[2,87],{78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF}),o($V01,[2,88],{78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF}),o($V01,[2,89],{78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF}),o($V01,[2,90],{78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF}),o($V01,[2,91],{78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF}),o($V01,[2,92],{78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF}),o($VY,[2,93],{78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL}),o([8,20,41,43,91,93],[2,94],{78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM}),{43:[1,191],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,93:$VO},o($VP,[2,96]),o($VP,[2,104]),{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:192,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},{45:[1,193],48:[1,194]},{49:[1,195]},{2:$V0,4:196,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,26:$V4,39:20,50:$V5,51:$V6,52:$V7,57:$V8,62:$V9,65:$Va,66:$Vb,67:$Vc,75:$Vd,77:$Ve},{58:197,59:198,60:$V11,61:$V21},{8:[1,201],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,93:$VO},{8:[1,202],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,93:$VO},{26:[1,203]},{26:[1,204]},{2:$V0,4:205,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,26:$V4,39:20,50:$V5,51:$V6,52:$V7,57:$V8,62:$V9,65:$Va,66:$Vb,67:$Vc,75:$Vd,77:$Ve},{19:[1,206]},{20:[1,207],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,93:$VO},{2:$V0,4:208,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,26:$V4,39:20,50:$V5,51:$V6,52:$V7,57:$V8,62:$V9,65:$Va,66:$Vb,67:$Vc,75:$Vd,77:$Ve},{44:209,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU},{43:[1,210],53:[1,211]},{26:$VV,69:212},{44:213,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU},o($VX,[2,76],{78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,93:$VO}),{20:[1,214],41:$VW},o($VP,[2,24]),{20:[1,215]},o($VP,[2,27]),o($VP,[2,28]),{20:[1,216],41:$VW},{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:217,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},o($Vw,[2,33],{78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,93:$VO}),{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:218,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},{49:[1,219]},o($V31,[2,38]),{2:$V0,6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:[1,220],26:$V4,39:20,50:$V5,51:$V6,52:$V7,57:$V8,62:$V9,65:$Va,66:$Vb,67:$Vc,75:$Vd,77:$Ve},{25:[1,221],59:222,60:$V11,61:$V21},o($V41,[2,50]),{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:223,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},{43:[1,224]},{17:225,26:$V51},{17:227,26:$V51},{20:[1,228]},{20:[1,229]},{2:$V0,6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:[1,230],26:$V4,39:20,50:$V5,51:$V6,52:$V7,57:$V8,62:$V9,65:$Va,66:$Vb,67:$Vc,75:$Vd,77:$Ve},{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:231,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},{8:[1,232]},{2:$V0,6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:[1,233],26:$V4,39:20,50:$V5,51:$V6,52:$V7,57:$V8,62:$V9,65:$Va,66:$Vb,67:$Vc,75:$Vd,77:$Ve},{53:[1,234]},{44:235,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU},{2:$V0,4:236,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,26:$V4,39:20,50:$V5,51:$V6,52:$V7,57:$V8,62:$V9,65:$Va,66:$Vb,67:$Vc,75:$Vd,77:$Ve},o($VX,[2,65]),o($VX,[2,67]),o($VP,[2,23]),o($VP,[2,26]),o($VP,[2,29]),o([8,20,41,43,93],[2,97],{78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN}),o($Vw,[2,35],{78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,93:$VO}),o($V31,[2,37]),o($Vf,[2,42],{54:237,56:239,55:$V61}),o($Vf,[2,48]),o($V41,[2,49]),{43:[1,240],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,93:$VO},{2:$V0,4:241,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,26:$V4,39:20,50:$V5,51:$V6,52:$V7,57:$V8,62:$V9,65:$Va,66:$Vb,67:$Vc,75:$Vd,77:$Ve},{20:[1,242]},{27:$Vi,28:$Vj},{20:[1,243]},{53:[1,244]},{25:[1,245]},o($Vf,[2,57]),{20:[1,246],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,93:$VO},o($Vf,[2,73]),o($Vf,[2,59]),{2:$V0,4:247,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,26:$V4,39:20,50:$V5,51:$V6,52:$V7,57:$V8,62:$V9,65:$Va,66:$Vb,67:$Vc,75:$Vd,77:$Ve},{53:[1,248]},{2:$V0,6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:[1,249],26:$V4,39:20,50:$V5,51:$V6,52:$V7,57:$V8,62:$V9,65:$Va,66:$Vb,67:$Vc,75:$Vd,77:$Ve},o($Vf,[2,43]),{52:[1,250],53:[1,251]},o($Vf,[2,46]),{2:$V0,4:252,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,26:$V4,39:20,50:$V5,51:$V6,52:$V7,57:$V8,62:$V9,65:$Va,66:$Vb,67:$Vc,75:$Vd,77:$Ve},o($V41,[2,52],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,23:17,24:18,39:20,6:33,2:$V0,18:$V1,21:$V2,22:$V3,26:$V4,50:$V5,51:$V6,52:$V7,57:$V8,62:$V9,65:$Va,66:$Vb,67:$Vc,75:$Vd,77:$Ve}),{53:[1,253]},{53:[1,254]},{2:$V0,4:255,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,26:$V4,39:20,50:$V5,51:$V6,52:$V7,57:$V8,62:$V9,65:$Va,66:$Vb,67:$Vc,75:$Vd,77:$Ve},{2:$V0,4:256,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,26:$V4,39:20,50:$V5,51:$V6,52:$V7,57:$V8,62:$V9,65:$Va,66:$Vb,67:$Vc,75:$Vd,77:$Ve},o($Vf,[2,58]),{2:$V0,6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:[1,257],26:$V4,39:20,50:$V5,51:$V6,52:$V7,57:$V8,62:$V9,65:$Va,66:$Vb,67:$Vc,75:$Vd,77:$Ve},{2:$V0,4:258,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,26:$V4,39:20,50:$V5,51:$V6,52:$V7,57:$V8,62:$V9,65:$Va,66:$Vb,67:$Vc,75:$Vd,77:$Ve},o($Vf,[2,61]),{19:[1,259]},{2:$V0,4:260,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,26:$V4,39:20,50:$V5,51:$V6,52:$V7,57:$V8,62:$V9,65:$Va,66:$Vb,67:$Vc,75:$Vd,77:$Ve},o($V41,[2,51],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,23:17,24:18,39:20,6:33,2:$V0,18:$V1,21:$V2,22:$V3,26:$V4,50:$V5,51:$V6,52:$V7,57:$V8,62:$V9,65:$Va,66:$Vb,67:$Vc,75:$Vd,77:$Ve}),{2:$V0,4:261,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,26:$V4,39:20,50:$V5,51:$V6,52:$V7,57:$V8,62:$V9,65:$Va,66:$Vb,67:$Vc,75:$Vd,77:$Ve},{2:$V0,4:262,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,26:$V4,39:20,50:$V5,51:$V6,52:$V7,57:$V8,62:$V9,65:$Va,66:$Vb,67:$Vc,75:$Vd,77:$Ve},{2:$V0,6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:[1,263],26:$V4,39:20,50:$V5,51:$V6,52:$V7,57:$V8,62:$V9,65:$Va,66:$Vb,67:$Vc,75:$Vd,77:$Ve},{2:$V0,6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:[1,264],26:$V4,39:20,50:$V5,51:$V6,52:$V7,57:$V8,62:$V9,65:$Va,66:$Vb,67:$Vc,75:$Vd,77:$Ve},o($Vf,[2,62]),{2:$V0,6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:[1,265],26:$V4,39:20,50:$V5,51:$V6,52:$V7,57:$V8,62:$V9,65:$Va,66:$Vb,67:$Vc,75:$Vd,77:$Ve},{15:71,16:72,19:$Vm,26:$Vn,35:$Vo,46:266,48:$Vp,78:$Vq,92:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv},{2:$V0,6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:[1,267],26:$V4,39:20,50:$V5,51:$V6,52:$V7,57:$V8,62:$V9,65:$Va,66:$Vb,67:$Vc,75:$Vd,77:$Ve},{2:$V0,6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:[1,268],26:$V4,39:20,50:$V5,51:$V6,52:$V7,57:$V8,62:$V9,65:$Va,66:$Vb,67:$Vc,75:$Vd,77:$Ve},{2:$V0,6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:[1,269],26:$V4,39:20,50:$V5,51:$V6,52:$V7,57:$V8,62:$V9,65:$Va,66:$Vb,67:$Vc,75:$Vd,77:$Ve},o($Vf,[2,55]),o($Vf,[2,56]),o($Vf,[2,60]),{20:[1,270],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,93:$VO},o($Vf,[2,47]),o($Vf,[2,53]),o($Vf,[2,54]),{53:[1,271]},{2:$V0,4:272,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,26:$V4,39:20,50:$V5,51:$V6,52:$V7,57:$V8,62:$V9,65:$Va,66:$Vb,67:$Vc,75:$Vd,77:$Ve},{2:$V0,6:33,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:[1,273],26:$V4,39:20,50:$V5,51:$V6,52:$V7,57:$V8,62:$V9,65:$Va,66:$Vb,67:$Vc,75:$Vd,77:$Ve},o($Vf,[2,44],{56:239,54:274,55:$V61}),o($Vf,[2,45])],
defaultActions: {30:[2,39],31:[2,40],32:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  //ERRORES
  const error= require("../ArchivosTS/entorno/error");
  const lista= require("../ArchivosTS/entorno/listaerrores");

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas		
break;
case 3:return 21;
break;
case 4:return 22;
break;
case 5:return 77;
break;
case 6:return 70;
break;
case 7:return 71;
break;
case 8:return 72;
break;
case 9:return 94;
break;
case 10:return 95;
break;
case 11:return 73;
break;
case 12:return 74;
break;
case 13:return 18;
break;
case 14:return 67;
break;
case 15:return 75;
break;
case 16:return 76;
break;
case 17:return 30;
break;
case 18:return 32;
break;
case 19:return 33;
break;
case 20:return 34;
break;
case 21:return 36;
break;
case 22:return 37;
break;
case 23:return 38;
break;
case 24:return 50;
break;
case 25:return 51;
break;
case 26:return 52;
break;
case 27:return 55;
break;
case 28:return 65;
break;
case 29:return 66;
break;
case 30:return 57;
break;
case 31:return 60;
break;
case 32:return 61;
break;
case 33:return 62;
break;
case 34:return 64;
break;
case 35:return 63;  
break;
case 36:return 79;
break;
case 37:return 78;
break;
case 38:return 80;
break;
case 39:return 81;
break;
case 40:return 83;
break;
case 41:return 82;
break;
case 42:return 27;
break;
case 43:return 28;
break;
case 44:return 84;
break;
case 45:return 85;
break;
case 46:return 86;
break;
case 47:return 87;
break;
case 48:return 88;
break;
case 49:return 89;
break;
case 50:return 90;
break;
case 51:return 91;
break;
case 52:return 92;
break;
case 53:return 93;
break;
case 54:return 43;
break;
case 55:return 29;
break;
case 56:return 41;
break;
case 57:return 8;
break;
case 58:return 45;
break;
case 59:return 48;
break;
case 60:return 49;
break;
case 61:return 53;
break;
case 62:return 25;
break;
case 63:return 19;
break;
case 64:return 20;
break;
case 65: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 96; 
break;
case 66: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 97; 
break;
case 67:return 35;
break;
case 68:return 26;
break;
case 69:return 5;
break;
case 70: 
  const e= new error.error("Léxico","El caracter "+yy_.yytext+" no pertenece al lenguaje",yy_.yylloc.first_line,yy_.yylloc.first_column);
  lista.listaerrores.obtenerLista().guardar(e);
  //console.log('Error Lexico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
          
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:void\b)/,/^(?:Array\b)/,/^(?:graficar_ts\b)/,/^(?:function\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:charAt\b)/,/^(?:toLowerCase\b)/,/^(?:toUpperCase\b)/,/^(?:concat\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\*\*)/,/^(?:%)/,/^(?:\+\+)/,/^(?:--)/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?::)/,/^(?:\.)/,/^(?:,)/,/^(?:;)/,/^(?:=)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ejecutar;
exports.Parser = ejecutar.Parser;
exports.parse = function () { return ejecutar.parse.apply(ejecutar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}